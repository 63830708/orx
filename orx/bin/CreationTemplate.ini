; Orx creation template - No unicode support

; FLOAT values are expressed with a '.' as deciaml separator.
; INT can be expressed using different prefixes (not case sensitive):
; - decimal without any prefix: 16
; - hexadecimal with prefix '0x': 0x10
; - octal with prefix '0': 020
; - binary with prefix '0b': 0b10000
; Wherever numerical values are used (Int, Float and Vector), you can have a random generated value using the separator ~. Example: Value= [Float1]~[Float2];

[ObjectTemplate]
Graphic=GraphicTemplate;
Animation=AnimationCursorTemplate;
Body=BodyTemplate;
Color={r, g, b}(~{r, g, b});
Alpha=[Float](~[Float]);
AutoScroll=x|y|both;
Flip=x|y|both;
DepthScale=true|false;
Position={x, y, z}(~{x, y, z});
Rotation=[Float](~[Float]);
Scale={x,y,z}(~{x, y, z})|[Float](~[Float]); NB: z is ignored for 2D objects;

[GraphicTemplate]
Texture=path/to/ImageFile.ext;
TextureTL={x, y, z}(~{x, y, z}); NB: z is ignored;
TextureBR={x, y, z}(~{x, y, z}); NB: z is ignored;
Pivot=centered|{x, y, z}(~{x, y, z}); NB: z is ignored for 2D graphics;
Flip=x|y|both;
Color={r, g, b}(~{r, g, b});
Alpha=[Float](~[Float]);

[BodyTemplate]
Position={x, y, z}(~{x, y, z});
Rotation=[Float](~[Float]);
Inertia=[Float](~[Float]);
Mass=[Float](~[Float]);
LinearDamping=[Float](~[Float]);
AngularDamping=[Float](~[Float]);
FixedRotation=true|false;
HighSpeed=true|false;
Dynamic=true|false;
Parts=BodyPartSphereTemplate BodyPartBoxTemplate;

[BodyPartSphereTemplate]
Type=Sphere;
Center={x, y, z}(~{x, y, z})|full;
Radius=[Float](~[Float])|full;
Friction=[Float](~[Float]);
Restitution=[Float](~[Float]);
Density=[Float](~[Float]);
SelfFlags=flags;
CheckMask=flags;
Solid=true|false;

[BodyPartBoxTemplate]
Type=Box;
TopLeft={x, y, z}(~{x, y, z})|full;
BottomRight={x, y, z}(~{x, y, z})|full;
Friction=[Float](~[Float]);
Restitution=[Float](~[Float]);
Density=[Float](~[Float]);
SelfFlags=flags;
CheckMask=flags;
Solid=true|false;

[AnimationCursorTemplate]
AnimationSet=AnimationSetTemplate;
Frequency=[Float](~[Float]);

[AnimationSetTemplate]
Animation[Int]=AnimationTemplate; Example: Animation1=Animation1Template;
Link[Int]=Animation[N1]-Animation[N2]; Example: Link1=Animation2-Animation3;
LinkProperty[Int]=immediate; Example: LinkProperty1=immediate;
LinkPriority[Int]=[Int](~[Int]); NB: Value should be [0-15]. 0 being the lowest, 8 the default and 15 the highest; Example: LinkPriority1=10;

[AnimationTemplate]
DefaultKeyDuration=[Float](~[Float]);
KeyData[Int]=GraphicTemplate; Example: KeyData1=GraphicTemplate1;
KeyDuration[Int]=[Float](~[Float]); Example: KeyDuration1=0.1f;

[ViewportTemplate]
Texture=path/to/TextureFile.ext; NB: No texture will default to the screen one
RelativePosition= left|right|top|bottom; Example: RelativePosition=top left;
Position={x, y, z}(~{x, y, z}); NB: Position is in pixels and will be ignored if RelativePosition is specified
RelativeSize={x, y, z}(~{x, y, z}); Example: RelativeSize={1.0, 1.0, 0.0};
Size={x, y, z}(~{x, y, z}); NB: Size is in pixels and will be ignored if RelativeSize is specified
BackgroundColor={r, g, b}(~{r, g, b});
BackgroundClear=true|false; NB: This value defaults to true if not specified
Camera=CameraTemplate;

[CameraTemplate]
Zoom=[Float](~[Float]);
Position={x, y, z}(~{x, y, z});
Rotation=[Float](~[Float]);
FrustumNear=[Float](~[Float]);
FrustumFar=[Float](~[Float]);
FrustumWidth=[Float](~[Float]);
FrustumHeight=[Float](~[Float]);

[FXTemplate]
Slot[Int]=FXSlotTemplate; NB: There is a maximum of 5 slots, and the FX stops at the first empty slot. Example: Slot1=FXSlot1Template;
KeepInCache=true|false; NB: If true, the FX will always stay in cache, even if no FX of this type is currently in use. Can save time but costs memory. Defaults to false;

[FXSlotAlphaTemplate]
Type=alpha;
StartTime=[Float](~[Float]); NB: Start time in seconds;
EndTime=[Float](~[Float]); NB: End time in seconds;
Period=[Float](~[Float]); NB: Cycle period is in seconds. 0.0 means the whole length will be used as a period;
Phasis=[Float](~[Float]); NB: Cycle phasis is [0.0-1.0];
Amplification=[Float](~[Float]); NB: Curbe amplification coef over time. < 1.0 => attenuation, = 1.0 => constant, > 1.0 => amplification. Defaults to 1.0;
Curve=linear|saw|sine;
Pow=[Float](~[Float]); NB: 1.0 is the default value and will result in a regulard curve; It defaults to false;
Absolute=true|false; NB: The curve coefficient will be used as an absolute value.It defaults to false (=relative);
StartAlpha=[Float](~[Float]); NB: Alpha is opacity in [0.0-1.0];
EndAlpha=[Float](~[Float]); NB: Alpha is opacity in [0.0-1.0];

[FXSlotColorTemplate]
Type=color;
StartTime=[Float](~[Float]); NB: Start time in seconds;
EndTime=[Float](~[Float]); NB: End time in seconds;
Period=[Float](~[Float]); NB: Cycle period is in seconds. 0.0 means the whole length will be used as a period;
Phasis=[Float](~[Float]); NB: Cycle phasis is [0.0-1.0];
Amplification=[Float](~[Float]); NB: Curbe amplification coef over time. < 1.0 => attenuation, = 1.0 => constant, > 1.0 => amplification. Defaults to 1.0;
Curve=linear|saw|sine;
Pow=[Float](~[Float]); NB: 1.0 is the default value and will result in a regulard curve; It defaults to false;
Absolute=true|false; NB: The curve coefficient will be used as an absolute value.It defaults to false (=relative);
StartColor={r, g, b}(~{r, g, b});
EndColor={r, g, b}(~{r, g, b});

[FXSlotRotationTemplate]
Type=rotation;
StartTime=[Float](~[Float]); NB: Start time in seconds;
EndTime=[Float](~[Float]); NB: End time in seconds;
Period=[Float](~[Float]); NB: Cycle period is in seconds. 0.0 means the whole length will be used as a period;
Phasis=[Float](~[Float]); NB: Cycle phasis is [0.0-1.0];
Amplification=[Float](~[Float]); NB: Curbe amplification coef over time. < 1.0 => attenuation, = 1.0 => constant, > 1.0 => amplification. Defaults to 1.0;
Curve=linear|saw|sine;
Pow=[Float](~[Float]); NB: 1.0 is the default value and will result in a regulard curve; It defaults to false;
Absolute=true|false; NB: The curve coefficient will be used as an absolute value.It defaults to false (=relative);
StartRotation=[Float](~[Float]); NB: Rotation is in degrees;
EndRotation=[Float](~[Float]); NB: Rotation is in degrees;

[FXSlotScaleTemplate]
Type=scale;
StartTime=[Float](~[Float]); NB: Start time in seconds;
EndTime=[Float](~[Float]); NB: End time in seconds;
Period=[Float](~[Float]); NB: Cycle period is in seconds. 0.0 means the whole length will be used as a period;
Phasis=[Float](~[Float]); NB: Cycle phasis is [0.0-1.0];
Amplification=[Float](~[Float]); NB: Curbe amplification coef over time. < 1.0 => attenuation, = 1.0 => constant, > 1.0 => amplification. Defaults to 1.0;
Curve=linear|saw|sine;
Pow=[Float](~[Float]); NB: 1.0 is the default value and will result in a regulard curve; It defaults to false;
Absolute=true|false; NB: The curve coefficient will be used as an absolute value.It defaults to false (=relative);
StartScale={x,y,z}(~{x, y, z})|[Float](~[Float]);
EndScale={x,y,z}(~{x, y, z})|[Float](~[Float]);

[FXSlotTranslationTemplate]
Type=translation;
StartTime=[Float](~[Float]); NB: Start time in seconds;
EndTime=[Float](~[Float]); NB: End time in seconds;
Period=[Float](~[Float]); NB: Cycle period is in seconds. 0.0 means the whole length will be used as a period;
Phasis=[Float](~[Float]); NB: Cycle phasis is [0.0-1.0];
Amplification=[Float](~[Float]); NB: Curbe amplification coef over time. < 1.0 => attenuation, = 1.0 => constant, > 1.0 => amplification. Defaults to 1.0;
Curve=linear|saw|sine;
Pow=[Float](~[Float]); NB: 1.0 is the default value and will result in a regulard curve; It defaults to false;
Absolute=true|false; NB: The curve coefficient will be used as an absolute value.It defaults to false (=relative);
StartPosition={x, y, z}(~{x, y, z});
EndPosition={x, y, z}(~{x, y, z});
