; orx - Tutorial config file
; Should be used with orx v.1.3+

[Display]
ScreenWidth   = 800
ScreenHeight  = 600
Title         = Lighting/Shader Tutorial

[Lighting]
Radius  = 0.3 ~ 0.7
Color   = (1.0, 0.0, 0.0) # (0.0, 1.0, 0.0) # (0.0, 0.0, 1.0) # (1.0, 1.0, 0.0) # (1.0, 0.0, 1.0) # (0.0, 1.0, 1.0) # (1.0, 1.0, 1.0)

[Input]
SetList = MainInput

[MainInput]
KEY_ESCAPE        = Quit
MOUSE_LEFT        = CreateLight
MOUSE_RIGHT       = ClearLights
MOUSE_WHEEL_UP    = IncreaseRadius
MOUSE_WHEEL_DOWN  = DecreaseRadius
KEY_SPACE         = ToggleAlpha

[Scene]
ChildList = Background # Logo # RegularGenerator # BumpGenerator

[Viewport]
Camera = Camera

[Camera]
; We use the same size for the camera than our display on screen so as to obtain a 1:1 ratio
FrustumWidth  = @Display.ScreenWidth
FrustumHeight = @Display.ScreenHeight
FrustumFar    = 2.0
Position      = (0.0, 0.0, -1.0)

[Physics]
Gravity = (0.0, 9.81, 0.0)

[BackgroundGraphic]
Texture = pixel
Pivot   = center

[LogoGraphic]
Texture = ../../data/object/orx.png
Pivot   = center

[DemoiselleGraphic]
Texture = ../../data/object/demoiselle.png
Pivot   = center

[FujiGraphic]
Texture = ../../data/object/fuji.png
Pivot   = center

[Boat1Graphic]
Texture = ../../data/object/boat1.png
Pivot   = center

[Boat2Graphic]
Texture = ../../data/object/boat2.png
Pivot   = center

[Lit]
ShaderList = LightShader

[Background]
Graphic       = BackgroundGraphic
Smoothing     = false
Position      = (0, 0, 0.5)
ParentCamera  = Camera
Scale         = 1
Color         = (120, 20, 20)

[Logo@Lit]
Graphic   = LogoGraphic
FXList    = LoopFX
Smoothing = true

[Regular@Lit]
Graphic   = DemoiselleGraphic # FujiGraphic # Boat1Graphic # Boat2Graphic
Smoothing = false
LifeTime  = 20

[Bump@Regular]
UseBumpMap  = true

[RegularGenerator]
Spawner   = RegularSpawner
Position  = (600, -150, 0)
Scale     = (-1, 1, 1)

[BumpGenerator]
Spawner   = BumpSpawner
Position  = (-600, 150, 0)

[RegularSpawner]
Object      = Regular
WaveSize    = 1
WaveDelay   = 2.5
ObjectSpeed = (-100, 0, 0)

[BumpSpawner@RegularSpawner]
Object      = Bump
ObjectSpeed = (100, 0, 0)

[LoopFX]
SlotList  = Flip # Rot
Loop      = true

[Flip]
Type        = scale
Curve       = sine
StartTime   = 0.0
EndTime     = 10.0
Period      = 2.0
StartValue  = (1.0, 1.0, 1.0)
EndValue    = (1.0, -1.0, 1.0)

[Rot@Flip]
Type        = rotation
Curve       = linear
Period      = 3.0
StartValue  = 0
EndValue    = 360 # -360

[LightShader]
Code = "
vec2 GetLightVector(int _iIndex)
{
  // Done!
  return vec2((avLightPos[_iIndex].x - gl_FragCoord.x) / fScreenSize, 1.0 - (avLightPos[_iIndex].y + gl_FragCoord.y) / fScreenSize);
}

vec3 GetNormal()
{
  const vec3  vBW = vec3(0.299, 0.587, 0.114);
  vec2        vLeft, vRight, vUp, vDown, vPixelSize;
  vec3        vNormal;

  // Gets pizel size
  vPixelSize = vec2((Texture_right - Texture_left) / vSize.x, (Texture_top - Texture_bottom) / vSize.y);

  // Widen it for a better visual effect
  vPixelSize *= 2.0;

  // Computes neighbouring positions
  vLeft   = vec2(gl_TexCoord[0].x - vPixelSize.x, gl_TexCoord[0].y);
  vRight  = vec2(gl_TexCoord[0].x + vPixelSize.x, gl_TexCoord[0].y);
  vUp     = vec2(gl_TexCoord[0].x, gl_TexCoord[0].y - vPixelSize.y);
  vDown   = vec2(gl_TexCoord[0].x, gl_TexCoord[0].y + vPixelSize.y);

  // Gets their greyed values
  float fLeft   = dot(texture2D(Texture, vLeft).rgb, vBW.rgb);
  float fRight  = dot(texture2D(Texture, vRight).rgb, vBW.rgb);
  float fUp     = dot(texture2D(Texture, vUp).rgb, vBW.rgb);
  float fDown   = dot(texture2D(Texture, vDown).rgb, vBW.rgb);

  // Computes normal
  vNormal = normalize(vec3((fLeft - fRight), (fUp - fDown), 0.1));

  // Done!
  return vNormal;
}

vec4 GetLightValue(int _iIndex, vec3 _vNormal)
{
  float fIntensity, fBump;
  vec4  vValue;

  // Gets vector from point to light
  vec2 vLight = GetLightVector(_iIndex);

  // Gets its intensity
  fIntensity = clamp(1.0 - (1.0 / (afLightRadius[_iIndex] * afLightRadius[_iIndex])) * length(vLight), 0.0, 1.0);

  // Uses bump map? */
  if(UseBumpMap != 0.0)
  {
    // Gets bump coef
    fBump = dot(normalize(vec3(vLight, 0.1)), _vNormal);
  }
  else
  {
    // No bump
    fBump = 1.0;
  }

  // Gets colored light value
  vValue = fIntensity * vec4(fBump * avLightColor[_iIndex], afLightAlpha[_iIndex]);

  // Done!
  return vValue;
}

void main()
{
  vec4  vColor, vPixel;
  vec3  vNormal;
  int   i;
  const int iLightNumber = 10;

  // Clears color
  vColor = vec4(0.0, 0.0, 0.0, 0.0);

  // Gets current pixel value
  vPixel = texture2D(Texture, gl_TexCoord[0].xy);

  // Uses bump map?
  if(UseBumpMap != 0.0)
  {
    // Gets normal
    vNormal = GetNormal();
  }
  else
  {
    // Clears normal
    vNormal = vec3(0.0);
  }

  // For all lights
  for(i = 0; i < iLightNumber; i++)
  {
    // Adds its contribution
    vColor += GetLightValue(i, vNormal);
  }

  // Adds ambient
  vColor.rgb += vAmbient;
  
  // Updates output
  gl_FragColor.rgb  = vPixel.rgb * vColor.rgb;
  gl_FragColor.a    = vPixel.a - vColor.a;
}
"
ParamList       = Texture # fScreenSize # vAmbient # avLightPos # afLightRadius # avLightColor # afLightAlpha # UseBumpMap # vSize
fScreenSize     = @Display.ScreenHeight
vAmbient        = (0.05, 0.05, 0.05)
avLightPos      = (0, 0, 0) # (0, 0, 0) # (0, 0, 0) # (0, 0, 0) # (0, 0, 0) # (0, 0, 0) # (0, 0, 0) # (0, 0, 0) # (0, 0, 0) # (0, 0, 0)
afLightRadius   = 0.0 # 0.0 # 0.0 # 0.0 # 0.0 # 0.0 # 0.0 # 0.0 # 0.0 # 0.0
avLightColor    = (0, 0, 0) # (0, 0, 0) # (0, 0, 0) # (0, 0, 0) # (0, 0, 0) # (0, 0, 0) # (0, 0, 0) # (0, 0, 0) # (0, 0, 0) # (0, 0, 0)
afLightAlpha    = 0.0 # 0.0 # 0.0 # 0.0 # 0.0 # 0.0 # 0.0 # 0.0 # 0.0 # 0.0
UseBumpMap      = 1.0
vSize           = (0, 0, 0)
