; orx - Tutorial config file
; Should be used with orx v.1.4+

[Main]
GameFile = 04_Anim; NB: It defines the game file when using the default main executable

[Input]
SetList = TutorialInput

[TutorialInput]
KEY_LEFT  = GoLeft
KEY_RIGHT = GoRight
KEY_UP    = ScaleUp
KEY_DOWN  = ScaleDown

[Display]
Smoothing = false; <= Deactivates smoothing (no blur when zooming)

[Viewport]
Camera = Camera

[Camera]
; We use the same size for the camera than our display on screen so as to obtain a 1:1 ratio
FrustumWidth  = @Display.ScreenWidth
FrustumHeight = @Display.ScreenHeight
FrustumFar    = 1.0
FrustumNear   = 0.0
Position      = (0.0, 0.0, -1.0)

[Pivot]
; This define the pivot we will use for all our animation frames
Pivot = (15.0, 31.0, 0.0)

[Graphic@Pivot]
; This is the main graphic object, used when no animation is played
Texture = ../../data/object/soldier.png

[Soldier]
Graphic             = Graphic
AnimationSet        = AnimSet
Scale               = 4.0
;AnimationFrequency  = 2.0f

[AnimSet]
; Here we defines an animation set which contains a group of animation and all the possible transitions
; This will be unique in memory, no matter how many objects use it

; First we define the complete set of animation
AnimationList = IdleRight#WalkRight#IdleLeft#WalkLeft

; Then we define all the links to form the animation graph
LinkList = IdleRightLoop#IdleRight2Left#IdleRight2WalkRight#WalkRightLoop#WalkRight2IdleRight#IdleLeftLoop#IdleLeft2Right#IdleLeft2WalkLeft#WalkLeftLoop#WalkLeft2IdleLeft

; Here we specify that we can loop on idle right, but also go to walk right or idle left at once, using the immediate property
[IdleRightLoop]
Source      = IdleRight
Destination = IdleRight
[IdleRight2Left]
Source      = IdleRight
Destination = IdleLeft
Property    = immediate
[IdleRight2WalkRight]
Source      = IdleRight
Destination = WalkRight
Property    = immediate

; Here we specify we can loop on walk right, but we can also go back to idle right as soone as it's requested
; If no destination animation is specified, we'll follow the highest priority link. The default priority for a link is 8
; So in our case, if we're walking and we stop having this desire, we'll automatically go back to idle right
[WalkRightLoop]
Source      = WalkRight
Destination = WalkRight
[WalkRight2IdleRight]
Source      = WalkRight
Destination = IdleRight
Property    = immediate; <= If you remove this property, the animation won't be cut to go immediately back to idle
Priority    = 9

;We do the exact same thing on the left side
[IdleLeftLoop]
Source      = IdleLeft
Destination = IdleLeft
[IdleLeft2Right]
Source      = IdleLeft
Destination = IdleRight
Property    = immediate
[IdleLeft2WalkLeft]
Source      = IdleLeft
Destination = WalkLeft
Property    = immediate

[WalkLeftLoop]
Source      = WalkLeft
Destination = WalkLeft
[WalkLeft2IdleLeft]
Source      = WalkLeft
Destination = IdleLeft
Property    = immediate; <= If you remove this property, the animation won't be cut to go back to idle
Priority    = 9

; Having defined an animation set, we can easily ask for a specific animation in code, all the transitions will
; be made by the engine without having to bother chaining them manually
; With a more complex graph, we could have our soldier sitting and asking him to run
; He would then automatically stand up, begin to run, then run without having to write any code for this to happen
; Events are sent when animations start, end or are cut so you can act accordingly if needed

[IdleRight]
; Our idle animation is only one frame here, that lasts for 0.05s
KeyData1      = AnimRight6
KeyDuration1  = 0.1

[IdleLeft]
; Our idle animation is only one frame here, that lasts for 0.05s
KeyData1      = AnimLeft6
KeyDuration1  = 0.1

[WalkRight]
; We have 6 frames in our walk animation
DefaultKeyDuration  = 0.1; <= This defines the duration for all our frames unless locally specified differently
KeyData1            = AnimRight1
KeyEventName1       = !!Left!!
KeyData2            = AnimRight2
KeyData3            = AnimRight3
KeyData4            = AnimRight4
KeyEventName4       = !!Right!!
KeyData5            = AnimRight5
KeyData6            = AnimRight6

[WalkLeft]
; We have 6 frames in our walk animation
DefaultKeyDuration  = 0.1; <= This defines the duration for all our frames unless locally specified differently
KeyData1            = AnimLeft1
KeyEventName1       = !!Right!!
KeyData2            = AnimLeft2
KeyData3            = AnimLeft3
KeyData4            = AnimLeft4
KeyEventName4       = !!Left!!
KeyData5            = AnimLeft5
KeyData6            = AnimLeft6

; Below are the frame data for our animations

[FullGraphic@Pivot]
; This define the graphic object used by animation for their frames
; We will just need to define locally the specific area of the texture that we'll use
; We can of course use one different image per frame, but this tutorial shows how to do it
; with a single image containing many frames
Texture     = ../../data/anim/soldier_full.png
TextureSize = (32, 32, 0)

[AnimRight1@FullGraphic]
; First animation frame, we use a generic naming as the frames may here be used in different animations
TextureCorner = (0, 0, 0)

[AnimRight2@FullGraphic]
TextureCorner = (0, 32, 0)

[AnimRight3@FullGraphic]
TextureCorner = (0, 64, 0)

[AnimRight4@FullGraphic]
TextureCorner = (32, 0, 0)

[AnimRight5@FullGraphic]
TextureCorner = (32, 32, 0)

[AnimRight6@FullGraphic]
TextureCorner = (32, 64, 0)

[AnimLeft1@AnimRight1]
; We just flip this frame on x axis
Flip = x

[AnimLeft2@AnimRight2]
; We just flip this frame on x axis
Flip = x

[AnimLeft3@AnimRight3]
; We just flip this frame on x axis
Flip = x

[AnimLeft4@AnimRight4]
; We just flip this frame on x axis
Flip = x

[AnimLeft5@AnimRight5]
; We just flip this frame on x axis
Flip = x

[AnimLeft6@AnimRight6]
; We just flip this frame on x axis
Flip = x
