; orx - Tutorial config file
; Should be used with orx v.1.0+

[Viewport]
ShaderList = Colorize

[Colorize]
Code = "void main()
{
  // Computes position with offset
  vec2 vPos = vec2(gl_TexCoord[0].x + offset.x, gl_TexCoord[0].y + offset.y);

  // Inside texture?
  if((vPos.x >= 0.0) && (vPos.x <= 1.0) && (vPos.y >= 0.0) && (vPos.y <= 1.0))
  {
    // Gets its pixel
    vec4 vPixel = texture2D(texture, vPos);

    // Gets its grayed value
    float fGray = ((vPixel.r * 0.39) + (vPixel.g * 0.50) + (vPixel.b * 0.11));

    // Outputs a colorized version on top of the original pixel
    gl_FragColor = vec4(fGray * color.r, fGray * color.g, fGray * color.b, 0.5) + 0.5 * texture2D(texture, gl_TexCoord[0].st);
  }
  else
  {
    // Outputs a black pixel on top of the original pixel
    gl_FragColor = vec4(0.0, 0.0, 0.0, 0.5) + 0.5 * texture2D(texture, gl_TexCoord[0].st);
  }
}"
ParamList = texture#offset#color
offset    = (-0.2, -0.2, 0.0) ~ (0.2, 0.2, 0.0); <= Let's take some random offset
color     = (1.0, 0.0, 0.0)#(0.0, 1.0, 0.0)#(0.0, 0.0, 1.0)#(1.0, 1.0, 0.0)#(1.0, 0.0, 1.0)#(0.0, 1.0, 1.0)
; As we don't specify the texture parameter, orx will use the texture of the object/viewport on which the shader is applied
