# -*- python -*-

# This is orx's buildmaster config file. It must be installed as
# 'master.cfg' in your buildmaster's base directory. More info in install.txt.

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.

c = BuildmasterConfig = {}

# This is the name of the hg command.
# NB: The full path to the executable is needed on windows.
# Ex: hg = 'c:\\Program Files\\TortoiseHg\\hg.exe'

hg = 'hg'


####### BUILDSLAVES

# The 'slaves' list defines the set of recognized buildslaves. Each element is
# a BuildSlave object, specifying a unique slave name and password.  The same
# slave name and password must be configured on the slave.

from buildbot.buildslave import BuildSlave
c['slaves'] = []
c['slaves'].append(BuildSlave('orx-win-slave-iarwain', 'alexandre'))
c['slaves'].append(BuildSlave('orx-mac-slave-iarwain', 'charles'))
c['slaves'].append(BuildSlave('orx-linux-slave-lydesik', 'david'))
c['slaves'].append(BuildSlave('orx-win-slave-mhyre', 'cesar'))
c['slaves'].append(BuildSlave('orx-win-slave-peppernut', 'argine'))

# 'slavePortnum' defines the TCP port to listen on for connections from slaves.
# This must match the value configured into the buildslaves (with their
# --master option).

c['slavePortnum'] = 9989


####### CHANGESOURCES

# The 'change_source' setting tells the buildmaster how it should find out
# about source code changes.

from buildbot.changes.hgpoller import HgPoller
c['change_source'] = []
c['change_source'].append(HgPoller(repourl  = 'https://bitbucket.org/orx/orx',
                                   branch   = 'default',
                                   workdir  = 'orx',
                                   hgbin    = hg))


####### REVLINKS

from buildbot import revlinks
c['revlink'] = revlinks.RevlinkMatch([r'https://bitbucket.orx/orx/orx/\(.*\)',
                                      r'http://bitbucket.orx/orx/orx/\(.*\)'],
                                      r'https://bitbucket.org/orx/orx/src/%s/\1')


####### SCHEDULERS

# Configure the Schedulers, which decide how to react to incoming changes.

from buildbot.schedulers.basic import SingleBranchScheduler
from buildbot.schedulers.forcesched import ForceScheduler
from buildbot.schedulers.triggerable import Triggerable
from buildbot.changes import filter
c['schedulers'] = []


# Misc definitions

def engine_is_important(change):
  allowed_names = ['code/src', 'code/include', 'code/plugins']
  for name in change.files:
    for allowed in allowed_names:
      if name.startswith(allowed):
        return True
  return False

def code_is_important(change):
  for name in change.files:
    if name.startswith('tutorial/src'):
      # Tutorials
      return True
    elif name.startswith('tools') and name.endswith('.c'):
      # Tools
      return True
  # Engine
  return engine_is_important(change)

platform_list = [
  {'name': 'vs2008', 'compile': True, 'fis': code_is_important},
  {'name': 'vs2010', 'compile': True, 'fis': code_is_important},
  {'name': 'mingw', 'compile': True, 'fis': code_is_important},
  {'name': 'mac', 'compile': True, 'fis': code_is_important},
  {'name': 'linux32', 'compile': True, 'fis': code_is_important},
  {'name': 'linux64', 'compile': True, 'fis': code_is_important},
  {'name': 'android', 'compile': True, 'fis': engine_is_important},
  {'name': 'doxygen', 'compile': True, 'fis': engine_is_important},
  {'name': 'src', 'compile': False, 'fis': None},
  {'name': 'extern', 'compile': False, 'fis': None}
]


# Force schedulers

builder_list = []

for platform in platform_list:
  c['schedulers'].append(ForceScheduler(name                    = 'force-package-' + platform['name'],
                                        builderNames            = ['package-' + platform['name']]))

c['schedulers'].append(ForceScheduler(name                      = 'force-package-all',
                                      builderNames              = ['package-' + platform['name'] for platform in platform_list]))


# Trigger schedulers

for platform in platform_list:
  if platform['compile']:
    c['schedulers'].append(Triggerable(name                     = 'compile-' + platform['name'],
                                      builderNames              = ['compile-' + platform['name']]))


# Single Branch schedulers

for platform in platform_list:
  if platform['compile']:
    c['schedulers'].append(SingleBranchScheduler(name           = 'auto-' + platform['name'],
                                                 builderNames   = ['compile-' + platform['name']],
                                                 change_filter  = filter.ChangeFilter(branch = 'default'),
                                                 fileIsImportant= platform['fis'],
                                                 treeStableTimer= 120))



####### BUILDERS

# The 'builders' list defines the Builders, which tell Buildbot how to perform a build:
# what steps, and which slaves can execute them. Note that any particular build will
# only take place on one slave.

import os.path

from buildbot.process.factory import BuildFactory
from buildbot.process.properties import Property
from buildbot.steps.source.mercurial import Mercurial
from buildbot.steps.trigger import Trigger
from buildbot.steps.shell import ShellCommand
from buildbot.steps.shell import Compile
from buildbot.steps.shell import SetProperty
from buildbot.steps.vstudio import VCExpress9
from buildbot.steps.vstudio import VS2008
from buildbot.steps.vstudio import VS2010
from buildbot.steps.transfer import DirectoryUpload
from buildbot.locks import SlaveLock


# Locks

package_lock = SlaveLock('package_lock', maxCount = 1)
compile_lock = SlaveLock('compile_lock', maxCount = 1)


# Misc variables

src_premake_list = [
  {'os': 'windows', 'action': 'vs2008'},
  {'os': 'windows', 'action': 'vs2010'},
  {'os': 'windows', 'action': 'codeblocks'},
  {'os': 'windows', 'action': 'codelite'},
  {'os': 'windows', 'action': 'gmake'},
  {'os': 'linux',   'action': 'codeblocks'},
  {'os': 'linux',   'action': 'codelite'},
  {'os': 'linux',   'action': 'gmake'},
  {'os': 'macosx',  'action': 'codeblocks'},
  {'os': 'macosx',  'action': 'codelite'},
  {'os': 'macosx',  'action': 'gmake'}
]

tool_list = [
  'orxCrypt',
  'orxFontGen'
]


# VS2008

factory_vs2008                                              = BuildFactory()
factory_vs2008.workdir                                      = '.'

factory_vs2008.addStep(Mercurial(repourl                    = 'https://bitbucket.org/orx/orx',
                                 branchType                 = 'inrepo',
                                 mode                       = 'full',
                                 method                     = 'fresh',
                                 timeout                    = 3600))

factory_vs2008.addStep(ShellCommand(command                 = ['premake4.exe', 'vs2008'],
                                    workdir                 = 'code/build',
                                    env                     = {'PATH': ['..\\..\\extern\\premake\\bin\\windows', '${PATH}']},
                                    haltOnFailure           = True,
                                    name                    = 'premake engine',
                                    description             = 'running premake engine',
                                    descriptionDone         = 'premake engine'))

factory_vs2008.addStep(SetProperty(command                  = ['python', '-c', "import os.path; print os.path.exists('c:\Program Files (x86)\Microsoft Visual Studio 9.0\Common7\IDE\VCExpress.exe')"],
                                   property                 = 'hasvcexpress',
                                   hideStepIf               = True))

factory_vs2008.addStep(VCExpress9(projectfile               = 'code/build/windows/vs2008/orx.sln',
                                  config                    = 'Embedded Dynamic Debug',
                                  mode                      = 'rebuild',
                                  name                      = 'compile engine debug',
                                  description               = 'compiling engine debug',
                                  descriptionDone           = 'engine debug',
                                  doStepIf                  = lambda step: step.build.getProperty('hasvcexpress'),
                                  hideStepIf                = lambda results, step: not step.build.getProperty('hasvcexpress')))
factory_vs2008.addStep(VCExpress9(projectfile               = 'code/build/windows/vs2008/orx.sln',
                                  config                    = 'Embedded Dynamic Profile',
                                  mode                      = 'rebuild',
                                  name                      = 'compile engine profile',
                                  description               = 'compiling engine profile',
                                  descriptionDone           = 'engine profile',
                                  doStepIf                  = lambda step: step.build.getProperty('hasvcexpress'),
                                  hideStepIf                = lambda results, step: not step.build.getProperty('hasvcexpress')))
factory_vs2008.addStep(VCExpress9(projectfile               = 'code/build/windows/vs2008/orx.sln',
                                  config                    = 'Embedded Dynamic Release',
                                  mode                      = 'rebuild',
                                  name                      = 'compile engine release',
                                  description               = 'compiling engine release',
                                  descriptionDone           = 'engine release',
                                  doStepIf                  = lambda step: step.build.getProperty('hasvcexpress'),
                                  hideStepIf                = lambda results, step: not step.build.getProperty('hasvcexpress')))

factory_vs2008.addStep(VS2008(projectfile                   = 'code/build/windows/vs2008/orx.sln',
                              config                        = 'Embedded Dynamic Debug',
                              mode                          = 'rebuild',
                              name                          = 'compile engine debug',
                              description                   = 'compiling engine debug',
                              descriptionDone               = 'engine debug',
                              doStepIf                      = lambda step: not step.build.getProperty('hasvcexpress'),
                              hideStepIf                    = lambda results, step: step.build.getProperty('hasvcexpress')))
factory_vs2008.addStep(VS2008(projectfile                   = 'code/build/windows/vs2008/orx.sln',
                              config                        = 'Embedded Dynamic Profile',
                              mode                          = 'rebuild',
                              name                          = 'compile engine profile',
                              description                   = 'compiling engine profile',
                              descriptionDone               = 'engine profile',
                              doStepIf                      = lambda step: not step.build.getProperty('hasvcexpress'),
                              hideStepIf                    = lambda results, step: step.build.getProperty('hasvcexpress')))
factory_vs2008.addStep(VS2008(projectfile                   = 'code/build/windows/vs2008/orx.sln',
                              config                        = 'Embedded Dynamic Release',
                              mode                          = 'rebuild',
                              name                          = 'compile engine release',
                              description                   = 'compiling engine release',
                              descriptionDone               = 'engine release',
                              doStepIf                      = lambda step: not step.build.getProperty('hasvcexpress'),
                              hideStepIf                    = lambda results, step: step.build.getProperty('hasvcexpress')))

factory_vs2008.addStep(ShellCommand(command                 = ['premake4.exe', 'vs2008'],
                                    workdir                 = 'tutorial/build',
                                    env                     = {'PATH': ['..\\..\\extern\\premake\\bin\\windows', '${PATH}']},
                                    haltOnFailure           = True,
                                    name                    = 'premake tutorial',
                                    description             = 'running premake tutorial',
                                    descriptionDone         = 'premake tutorial'))

factory_vs2008.addStep(VCExpress9(projectfile               = 'tutorial/build/windows/vs2008/Tutorial.sln',
                                  config                    = 'Release',
                                  mode                      = 'rebuild',
                                  name                      = 'compile tutorial release',
                                  description               = 'compiling tutorial release',
                                  descriptionDone           = 'tutorial release',
                                  doStepIf                  = lambda step: step.build.getProperty('hasvcexpress'),
                                  hideStepIf                = lambda results, step: not step.build.getProperty('hasvcexpress')))
factory_vs2008.addStep(VS2008(projectfile                   = 'tutorial/build/windows/vs2008/Tutorial.sln',
                              config                        = 'Release',
                              mode                          = 'rebuild',
                              name                          = 'compile tutorial release',
                              description                   = 'compiling tutorial release',
                              descriptionDone               = 'tutorial release',
                              doStepIf                      = lambda step: not step.build.getProperty('hasvcexpress'),
                              hideStepIf                    = lambda results, step: step.build.getProperty('hasvcexpress')))

factory_vs2008.addStep(VCExpress9(projectfile               = 'code/build/windows/vs2008/orx.sln',
                                  config                    = 'Static Release',
                                  mode                      = 'rebuild',
                                  name                      = 'compile static release',
                                  description               = 'compiling static release',
                                  descriptionDone           = 'static release',
                                  doStepIf                  = lambda step: step.build.getProperty('hasvcexpress'),
                                  hideStepIf                = lambda results, step: not step.build.getProperty('hasvcexpress')))
factory_vs2008.addStep(VS2008(projectfile                   = 'code/build/windows/vs2008/orx.sln',
                              config                        = 'Static Release',
                              mode                          = 'rebuild',
                              name                          = 'compile static release',
                              description                   = 'compiling static release',
                              descriptionDone               = 'static release',
                              doStepIf                      = lambda step: not step.build.getProperty('hasvcexpress'),
                              hideStepIf                    = lambda results, step: step.build.getProperty('hasvcexpress')))


for tool in tool_list:
  factory_vs2008.addStep(ShellCommand(command               = ['premake4.exe', 'vs2008'],
                                      workdir               = 'tools/' + tool + '/build',
                                      env                   = {'PATH': ['..\\..\\..\\extern\\premake\\bin\\windows', '${PATH}']},
                                      haltOnFailure         = True,
                                      name                  = 'premake ' + tool,
                                      description           = 'running premake ' + tool,
                                      descriptionDone       = 'premake ' + tool))

  factory_vs2008.addStep(VCExpress9(projectfile             = 'tools/' + tool + '/build/windows/vs2008/' + tool + '.sln',
                                    config                  = 'Release',
                                    mode                    = 'rebuild',
                                    name                    = 'compile ' + tool + ' release',
                                    description             = 'compiling ' + tool + ' release',
                                    descriptionDone         = tool + ' release',
                                    doStepIf                = lambda step: step.build.getProperty('hasvcexpress'),
                                    hideStepIf              = lambda results, step: not step.build.getProperty('hasvcexpress')))
  factory_vs2008.addStep(VS2008(projectfile                 = 'tools/' + tool + '/build/windows/vs2008/' + tool + '.sln',
                                config                      = 'Release',
                                mode                        = 'rebuild',
                                name                        = 'compile ' + tool + ' release',
                                description                 = 'compiling ' + tool + ' release',
                                descriptionDone             = tool + ' release',
                                doStepIf                    = lambda step: not step.build.getProperty('hasvcexpress'),
                                hideStepIf                  = lambda results, step: step.build.getProperty('hasvcexpress')))


factory_vs2008_package                                      = BuildFactory()
factory_vs2008_package.workdir                              = '.'

factory_vs2008_package.addStep(Trigger(schedulerNames       = ['compile-vs2008'],
                                       waitForFinish        = True,
                                       updateSourceStamp    = True,
                                       haltOnFailure        = True,
                                       name                 = 'compile vs2008'))

factory_vs2008_package.addStep(ShellCommand(command         = ['python', 'package.py', '-p', 'vs2008', '-v', Property('version', default = 'latest')],
                                            workdir         = 'code/build/python',
                                            haltOnFailure   = True,
                                            doStepIf        = lambda step: step.build.getProperty('version'),
                                            name            = 'build dev package',
                                            description     = 'building dev package',
                                            descriptionDone = 'dev package'))

factory_vs2008_package.addStep(ShellCommand(command         = ['python', 'package.py', '-p', 'tutovs2008', '-v', Property('version', default = 'latest')],
                                            workdir         = 'code/build/python',
                                            haltOnFailure   = True,
                                            doStepIf        = lambda step: step.build.getProperty('version'),
                                            name            = 'build tutorial package',
                                            description     = 'building tutorial package',
                                            descriptionDone = 'tutorial package'))

factory_vs2008_package.addStep(DirectoryUpload(slavesrc     = 'code/build/python/packages',
                                               masterdest   = './public_html/packages',
                                               url          = 'http://buildbot.orx-project.org:8010/packages',
                                               doStepIf     = lambda step: step.build.getProperty('version')))


# VS2010

factory_vs2010                                              = BuildFactory()
factory_vs2010.workdir                                      = '.'

factory_vs2010.addStep(Mercurial(repourl                    = 'https://bitbucket.org/orx/orx',
                                 branchType                 = 'inrepo',
                                 mode                       = 'full',
                                 method                     = 'fresh',
                                 timeout                    = 3600))

factory_vs2010.addStep(ShellCommand(command                 = ['premake4.exe', 'vs2010'],
                                    workdir                 = 'code/build',
                                    env                     = {'PATH': ['..\\..\\extern\\premake\\bin\\windows', '${PATH}']},
                                    haltOnFailure           = True,
                                    name                    = 'premake engine',
                                    description             = 'running premake engine',
                                    descriptionDone         = 'premake engine'))

factory_vs2010.addStep(SetProperty(command                  = ['python', '-c', "import os.path; print os.path.exists('c:\Program Files (x86)\Microsoft Visual Studio 10.0\Common7\IDE\VCExpress.exe')"],
                                   property                 = 'hasvcexpress',
                                   hideStepIf               = True))

factory_vs2010.addStep(VCExpress9(projectfile               = 'code/build/windows/vs2010/orx.sln',
                                  config                    = 'Embedded Dynamic Debug',
                                  mode                      = 'rebuild',
                                  name                      = 'compile engine debug',
                                  description               = 'compiling engine debug',
                                  descriptionDone           = 'engine debug',
                                  doStepIf                  = lambda step: step.build.getProperty('hasvcexpress'),
                                  hideStepIf                = lambda results, step: not step.build.getProperty('hasvcexpress')))
factory_vs2010.addStep(VCExpress9(projectfile               = 'code/build/windows/vs2010/orx.sln',
                                  config                    = 'Embedded Dynamic Profile',
                                  mode                      = 'rebuild',
                                  name                      = 'compile engine profile',
                                  description               = 'compiling engine profile',
                                  descriptionDone           = 'engine profile',
                                  doStepIf                  = lambda step: step.build.getProperty('hasvcexpress'),
                                  hideStepIf                = lambda results, step: not step.build.getProperty('hasvcexpress')))
factory_vs2010.addStep(VCExpress9(projectfile               = 'code/build/windows/vs2010/orx.sln',
                                  config                    = 'Embedded Dynamic Release',
                                  mode                      = 'rebuild',
                                  name                      = 'compile engine release',
                                  description               = 'compiling engine release',
                                  descriptionDone           = 'engine release',
                                  doStepIf                  = lambda step: step.build.getProperty('hasvcexpress'),
                                  hideStepIf                = lambda results, step: not step.build.getProperty('hasvcexpress')))

factory_vs2010.addStep(VS2010(projectfile                   = 'code/build/windows/vs2010/orx.sln',
                              config                        = 'Embedded Dynamic Debug',
                              mode                          = 'rebuild',
                              name                          = 'compile engine debug',
                              description                   = 'compiling engine debug',
                              descriptionDone               = 'engine debug',
                              doStepIf                      = lambda step: not step.build.getProperty('hasvcexpress'),
                              hideStepIf                    = lambda results, step: step.build.getProperty('hasvcexpress')))
factory_vs2010.addStep(VS2010(projectfile                   = 'code/build/windows/vs2010/orx.sln',
                              config                        = 'Embedded Dynamic Profile',
                              mode                          = 'rebuild',
                              name                          = 'compile engine profile',
                              description                   = 'compiling engine profile',
                              descriptionDone               = 'engine profile',
                              doStepIf                      = lambda step: not step.build.getProperty('hasvcexpress'),
                              hideStepIf                    = lambda results, step: step.build.getProperty('hasvcexpress')))
factory_vs2010.addStep(VS2010(projectfile                   = 'code/build/windows/vs2010/orx.sln',
                              config                        = 'Embedded Dynamic Release',
                              mode                          = 'rebuild',
                              name                          = 'compile engine release',
                              description                   = 'compiling engine release',
                              descriptionDone               = 'engine release',
                              doStepIf                      = lambda step: not step.build.getProperty('hasvcexpress'),
                              hideStepIf                    = lambda results, step: step.build.getProperty('hasvcexpress')))

factory_vs2010.addStep(ShellCommand(command                 = ['premake4.exe', 'vs2010'],
                                    workdir                 = 'tutorial/build',
                                    env                     = {'PATH': ['..\\..\\extern\\premake\\bin\\windows', '${PATH}']},
                                    haltOnFailure           = True,
                                    name                    = 'premake tutorial',
                                    description             = 'running premake tutorial',
                                    descriptionDone         = 'premake tutorial'))

factory_vs2010.addStep(VCExpress9(projectfile               = 'tutorial/build/windows/vs2010/Tutorial.sln',
                                  config                    = 'Release',
                                  mode                      = 'rebuild',
                                  name                      = 'compile tutorial release',
                                  description               = 'compiling tutorial release',
                                  descriptionDone           = 'tutorial release',
                                  doStepIf                  = lambda step: step.build.getProperty('hasvcexpress'),
                                  hideStepIf                = lambda results, step: not step.build.getProperty('hasvcexpress')))
factory_vs2010.addStep(VS2010(projectfile                   = 'tutorial/build/windows/vs2010/Tutorial.sln',
                              config                        = 'Release',
                              mode                          = 'rebuild',
                              name                          = 'compile tutorial release',
                              description                   = 'compiling tutorial release',
                              descriptionDone               = 'tutorial release',
                              doStepIf                      = lambda step: not step.build.getProperty('hasvcexpress'),
                              hideStepIf                    = lambda results, step: step.build.getProperty('hasvcexpress')))

factory_vs2010.addStep(VCExpress9(projectfile               = 'code/build/windows/vs2010/orx.sln',
                                  config                    = 'Static Release',
                                  mode                      = 'rebuild',
                                  name                      = 'compile static release',
                                  description               = 'compiling static release',
                                  descriptionDone           = 'static release',
                                  doStepIf                  = lambda step: step.build.getProperty('hasvcexpress'),
                                  hideStepIf                = lambda results, step: not step.build.getProperty('hasvcexpress')))
factory_vs2010.addStep(VS2010(projectfile                   = 'code/build/windows/vs2010/orx.sln',
                              config                        = 'Static Release',
                              mode                          = 'rebuild',
                              name                          = 'compile static release',
                              description                   = 'compiling static release',
                              descriptionDone               = 'static release',
                              doStepIf                      = lambda step: not step.build.getProperty('hasvcexpress'),
                              hideStepIf                    = lambda results, step: step.build.getProperty('hasvcexpress')))


for tool in tool_list:
  factory_vs2010.addStep(ShellCommand(command               = ['premake4.exe', 'vs2010'],
                                      workdir               = 'tools/' + tool + '/build',
                                      env                   = {'PATH': ['..\\..\\..\\extern\\premake\\bin\\windows', '${PATH}']},
                                      haltOnFailure         = True,
                                      name                  = 'premake ' + tool,
                                      description           = 'running premake ' + tool,
                                      descriptionDone       = 'premake ' + tool))

  factory_vs2010.addStep(VCExpress9(projectfile             = 'tools/' + tool + '/build/windows/vs2010/' + tool + '.sln',
                                    config                  = 'Release',
                                    mode                    = 'rebuild',
                                    name                    = 'compile ' + tool + ' release',
                                    description             = 'compiling ' + tool + ' release',
                                    descriptionDone         = tool + ' release',
                                    doStepIf                = lambda step: step.build.getProperty('hasvcexpress'),
                                    hideStepIf              = lambda results, step: not step.build.getProperty('hasvcexpress')))
  factory_vs2010.addStep(VS2010(projectfile                 = 'tools/' + tool + '/build/windows/vs2010/' + tool + '.sln',
                                config                      = 'Release',
                                mode                        = 'rebuild',
                                name                        = 'compile ' + tool + ' release',
                                description                 = 'compiling ' + tool + ' release',
                                descriptionDone             = tool + ' release',
                                doStepIf                    = lambda step: not step.build.getProperty('hasvcexpress'),
                                hideStepIf                  = lambda results, step: step.build.getProperty('hasvcexpress')))


factory_vs2010_package                                      = BuildFactory()
factory_vs2010_package.workdir                              = '.'

factory_vs2010_package.addStep(Trigger(schedulerNames       = ['compile-vs2010'],
                                       waitForFinish        = True,
                                       updateSourceStamp    = True,
                                       haltOnFailure        = True,
                                       name                 = 'compile vs2010'))

factory_vs2010_package.addStep(ShellCommand(command         = ['python', 'package.py', '-p', 'vs2010', '-v', Property('version', default = 'latest')],
                                            workdir         = 'code/build/python',
                                            haltOnFailure   = True,
                                            doStepIf        = lambda step: step.build.getProperty('version'),
                                            name            = 'build dev package',
                                            description     = 'building dev package',
                                            descriptionDone = 'dev package'))

factory_vs2010_package.addStep(ShellCommand(command         = ['python', 'package.py', '-p', 'tutovs2010', '-v', Property('version', default = 'latest')],
                                            workdir         = 'code/build/python',
                                            haltOnFailure   = True,
                                            doStepIf        = lambda step: step.build.getProperty('version'),
                                            name            = 'build tutorial package',
                                            description     = 'building tutorial package',
                                            descriptionDone = 'tutorial package'))

factory_vs2010_package.addStep(DirectoryUpload(slavesrc     = 'code/build/python/packages',
                                               masterdest   = './public_html/packages',
                                               url          = 'http://buildbot.orx-project.org:8010/packages',
                                               doStepIf     = lambda step: step.build.getProperty('version')))


# MinGW

factory_mingw                                               = BuildFactory()
factory_mingw.workdir                                       = '.'

factory_mingw.addStep(Mercurial(repourl                     = 'https://bitbucket.org/orx/orx',
                                branchType                  = 'inrepo',
                                mode                        = 'full',
                                method                      = 'fresh',
                                timeout                     = 3600))

factory_mingw.addStep(ShellCommand(command                  = ['premake4.exe', 'gmake'],
                                   workdir                  = 'code/build',
                                   env                      = {'PATH': ['..\\..\\extern\\premake\\bin\\windows', '${PATH}']},
                                   haltOnFailure            = True,
                                   name                     = 'premake engine',
                                   description              = 'running premake engine',
                                   descriptionDone          = 'premake engine'))

factory_mingw.addStep(Compile(command                       = ['mingw32-make', 'config=embedded_dynamic_debug'],
                              workdir                       = 'code/build/windows/gmake',
                              name                          = 'compile engine debug',
                              description                   = 'compiling engine debug',
                              descriptionDone               = 'engine debug'))

factory_mingw.addStep(Compile(command                       = ['mingw32-make', 'config=embedded_dynamic_profile'],
                              workdir                       = 'code/build/windows/gmake',
                              name                          = 'compile engine profile',
                              description                   = 'compiling engine profile',
                              descriptionDone               = 'engine profile'))

factory_mingw.addStep(Compile(command                       = ['mingw32-make', 'config=embedded_dynamic_release'],
                              workdir                       = 'code/build/windows/gmake',
                              name                          = 'compile engine release',
                              description                   = 'compiling engine release',
                              descriptionDone               = 'engine release'))

factory_mingw.addStep(ShellCommand(command                  = ['premake4.exe', 'gmake'],
                                   workdir                  = 'tutorial/build',
                                   env                      = {'PATH': ['..\\..\\extern\\premake\\bin\\windows', '${PATH}']},
                                   haltOnFailure            = True,
                                   name                     = 'premake tutorial',
                                   description              = 'running premake tutorial',
                                   descriptionDone          = 'premake tutorial'))

factory_mingw.addStep(Compile(command                       = ['mingw32-make', 'config=release'],
                              workdir                       = 'tutorial/build/windows/gmake',
                              name                          = 'compile tutorial release',
                              description                   = 'compiling tutorial release',
                              descriptionDone               = 'tutorial release'))

factory_mingw.addStep(Compile(command                       = ['mingw32-make', 'config=static_release'],
                              workdir                       = 'code/build/windows/gmake',
                              name                          = 'compile static release',
                              description                   = 'compiling static release',
                              descriptionDone               = 'static release'))

for tool in tool_list:
  factory_mingw.addStep(ShellCommand(command                = ['premake4.exe', 'gmake'],
                                     workdir                = 'tools/' + tool + '/build',
                                     env                    = {'PATH': ['..\\..\\..\\extern\\premake\\bin\\windows', '${PATH}']},
                                     haltOnFailure          = True,
                                     name                   = 'premake ' + tool,
                                     description            = 'running premake ' + tool,
                                     descriptionDone        = 'premake ' + tool))

  factory_mingw.addStep(Compile(command                     = ['mingw32-make', 'config=release'],
                                workdir                     = 'tools/' + tool + '/build/windows/gmake',
                                name                        = 'compile ' + tool + ' release',
                                description                 = 'compiling ' + tool + ' release',
                                descriptionDone             = tool + ' release'))


factory_mingw_package                                       = BuildFactory()
factory_mingw_package.workdir                               = '.'

factory_mingw_package.addStep(Trigger(schedulerNames        = ['compile-mingw'],
                                      waitForFinish         = True,
                                      updateSourceStamp     = True,
                                      haltOnFailure         = True,
                                      name                  = 'compile mingw'))

factory_mingw_package.addStep(ShellCommand(command          = ['python', 'package.py', '-p', 'mingw', '-v', Property('version', default = 'latest')],
                                           workdir          = 'code/build/python',
                                           haltOnFailure    = True,
                                           doStepIf         = lambda step: step.build.getProperty('version'),
                                           name             = 'build dev package',
                                           description      = 'building dev package',
                                           descriptionDone  = 'dev package'))

factory_mingw_package.addStep(ShellCommand(command          = ['python', 'package.py', '-p', 'tutomingw', '-v', Property('version', default = 'latest')],
                                           workdir          = 'code/build/python',
                                           haltOnFailure    = True,
                                           doStepIf         = lambda step: step.build.getProperty('version'),
                                           name             = 'build tutorial package',
                                           description      = 'building tutorial package',
                                           descriptionDone  = 'tutorial package'))

factory_mingw_package.addStep(DirectoryUpload(slavesrc      = 'code/build/python/packages',
                                              masterdest    = './public_html/packages',
                                              url           = 'http://buildbot.orx-project.org:8010/packages',
                                              doStepIf      = lambda step: step.build.getProperty('version')))


# Mac

factory_mac                                                 = BuildFactory()
factory_mac.workdir                                         = '.'

factory_mac.addStep(Mercurial(repourl                       = 'https://bitbucket.org/orx/orx',
                              branchType                    = 'inrepo',
                              mode                          = 'full',
                              method                        = 'fresh',
                              timeout                       = 3600))

factory_mac.addStep(ShellCommand(command                    = ['premake4', '--split-platforms', 'gmake'],
                                 workdir                    = 'code/build',
                                 env                        = {'PATH': ['../../extern/premake/bin/mac', '${PATH}']},
                                 haltOnFailure              = True,
                                 name                       = 'premake engine',
                                 description                = 'running premake engine',
                                 descriptionDone            = 'premake engine'))

factory_mac.addStep(Compile(command                         = ['make', 'config=embedded_dynamic_debug64'],
                            workdir                         = 'code/build/mac/gmake',
                            name                            = 'compile engine debug 64',
                            description                     = 'compiling engine debug 64',
                            descriptionDone                 = 'engine debug 64'))

factory_mac.addStep(Compile(command                         = ['make', 'config=embedded_dynamic_profile64'],
                            workdir                         = 'code/build/mac/gmake',
                            name                            = 'compile engine profile 64',
                            description                     = 'compiling engine profile 64',
                            descriptionDone                 = 'engine profile 64'))

factory_mac.addStep(Compile(command                         = ['make', 'config=embedded_dynamic_release64'],
                            workdir                         = 'code/build/mac/gmake',
                            name                            = 'compile engine release 64',
                            description                     = 'compiling engine release 64',
                            descriptionDone                 = 'engine release 64'))

factory_mac.addStep(Compile(command                         = ['make', 'config=embedded_dynamic_debug32'],
                            workdir                         = 'code/build/mac/gmake',
                            name                            = 'compile engine debug 32',
                            description                     = 'compiling engine debug 32',
                            descriptionDone                 = 'engine debug 32'))

factory_mac.addStep(Compile(command                         = ['make', 'config=embedded_dynamic_profile32'],
                            workdir                         = 'code/build/mac/gmake',
                            name                            = 'compile engine profile 32',
                            description                     = 'compiling engine profile 32',
                            descriptionDone                 = 'engine profile 32'))

factory_mac.addStep(Compile(command                         = ['make', 'config=embedded_dynamic_release32'],
                            workdir                         = 'code/build/mac/gmake',
                            name                            = 'compile engine release 32',
                            description                     = 'compiling engine release 32',
                            descriptionDone                 = 'engine release 32'))

factory_mac.addStep(Compile(command                         = ['lipo', '-create', 'x32/liborxd.dylib', 'x64/liborxd.dylib', '-output', 'liborxd.dylib'],
                            workdir                         = 'code/lib/dynamic',
                            name                            = 'create engine universal debug',
                            description                     = 'creating engine universal debug',
                            descriptionDone                 = 'engine universal debug'))

factory_mac.addStep(Compile(command                         = ['lipo', '-create', 'x32/liborxp.dylib', 'x64/liborxp.dylib', '-output', 'liborxp.dylib'],
                            workdir                         = 'code/lib/dynamic',
                            name                            = 'create engine universal profile',
                            description                     = 'creating engine universal profile',
                            descriptionDone                 = 'engine universal profile'))

factory_mac.addStep(Compile(command                         = ['lipo', '-create', 'x32/liborx.dylib', 'x64/liborx.dylib', '-output', 'liborx.dylib'],
                            workdir                         = 'code/lib/dynamic',
                            name                            = 'create engine universal release',
                            description                     = 'creating engine universal release',
                            descriptionDone                 = 'engine universal release'))

factory_mac.addStep(ShellCommand(command                    = ['premake4', 'gmake'],
                                 workdir                    = 'tutorial/build',
                                 env                        = {'PATH': ['../../extern/premake/bin/mac', '${PATH}']},
                                 haltOnFailure              = True,
                                 name                       = 'premake tutorial',
                                 description                = 'running premake tutorial',
                                 descriptionDone            = 'premake tutorial'))

factory_mac.addStep(Compile(command                         = ['make', 'config=release32'],
                            workdir                         = 'tutorial/build/mac/gmake',
                            warningPattern                  = '^(?!ld).*warning[: ].*',
                            name                            = 'compile tutorial release 32',
                            description                     = 'compiling tutorial release 32',
                            descriptionDone                 = 'tutorial release 32'))


for tool in tool_list:
  factory_mac.addStep(ShellCommand(command                  = ['premake4', 'gmake'],
                                   workdir                  = 'tools/' + tool + '/build',
                                   env                      = {'PATH': ['../../../extern/premake/bin/mac', '${PATH}']},
                                   haltOnFailure            = True,
                                   name                     = 'premake ' + tool,
                                   description              = 'running premake ' + tool,
                                   descriptionDone          = 'premake ' + tool))

  factory_mac.addStep(Compile(command                       = ['make', 'config=release32'],
                              workdir                       = 'tools/' + tool + '/build/mac/gmake',
                              warningPattern                = '^(?!ld).*warning[: ].*',
                              name                          = 'compile ' + tool + ' release 32',
                              description                   = 'compiling ' + tool + ' release 32',
                              descriptionDone               = tool + ' release 32'))


factory_mac_package                                         = BuildFactory()
factory_mac_package.workdir                                 = '.'

factory_mac_package.addStep(Trigger(schedulerNames          = ['compile-mac'],
                                    waitForFinish           = True,
                                    updateSourceStamp       = True,
                                    haltOnFailure           = True,
                                    name                    = 'compile mac'))

factory_mac_package.addStep(ShellCommand(command            = ['python', 'package.py', '-p', 'mac', '-v', Property('version', default = 'latest')],
                                         workdir            = 'code/build/python',
                                         haltOnFailure      = True,
                                         doStepIf           = lambda step: step.build.getProperty('version'),
                                         name               = 'build package',
                                         description        = 'building package',
                                         descriptionDone    = 'package'))

factory_mac_package.addStep(ShellCommand(command            = ['python', 'package.py', '-p', 'tutomac', '-v', Property('version', default = 'latest')],
                                         workdir            = 'code/build/python',
                                         haltOnFailure      = True,
                                         doStepIf           = lambda step: step.build.getProperty('version'),
                                         name               = 'build tutorial package',
                                         description        = 'building tutorial package',
                                         descriptionDone    = 'tutorial package'))

factory_mac_package.addStep(DirectoryUpload(slavesrc        = 'code/build/python/packages',
                                            masterdest      = './public_html/packages',
                                            url             = 'http://buildbot.orx-project.org:8010/packages',
                                            doStepIf        = lambda step: step.build.getProperty('version')))


# Linux32

factory_linux32                                             = BuildFactory()
factory_linux32.workdir                                     = '.'

factory_linux32.addStep(Mercurial(repourl                   = 'https://bitbucket.org/orx/orx',
                                  branchType                = 'inrepo',
                                  mode                      = 'full',
                                  method                    = 'fresh',
                                  timeout                   = 3600))

factory_linux32.addStep(ShellCommand(command                = ['premake4', 'gmake'],
                                     workdir                = 'code/build',
                                     env                    = {'PATH': ['../../extern/premake/bin/linux32', '${PATH}']},
                                     haltOnFailure          = True,
                                     name                   = 'premake engine',
                                     description            = 'running premake engine',
                                     descriptionDone        = 'premake engine'))

factory_linux32.addStep(Compile(command                     = ['make', 'config=embedded_dynamic_debug32'],
                                workdir                     = 'code/build/linux/gmake',
                                name                        = 'compile engine debug',
                                description                 = 'compiling engine debug',
                                descriptionDone             = 'engine debug'))

factory_linux32.addStep(Compile(command                     = ['make', 'config=embedded_dynamic_profile32'],
                                workdir                     = 'code/build/linux/gmake',
                                name                        = 'compile engine profile',
                                description                 = 'compiling engine profile',
                                descriptionDone             = 'engine profile'))

factory_linux32.addStep(Compile(command                     = ['make', 'config=embedded_dynamic_release32'],
                                workdir                     = 'code/build/linux/gmake',
                                name                        = 'compile engine release',
                                description                 = 'compiling engine release',
                                descriptionDone             = 'engine release'))

factory_linux32.addStep(ShellCommand(command                = ['premake4', 'gmake'],
                                     workdir                = 'tutorial/build',
                                     env                    = {'PATH': ['../../extern/premake/bin/linux32', '${PATH}']},
                                     haltOnFailure          = True,
                                     name                   = 'premake tutorial',
                                     description            = 'running premake tutorial',
                                     descriptionDone        = 'premake tutorial'))

factory_linux32.addStep(Compile(command                     = ['make', 'config=release32'],
                                workdir                     = 'tutorial/build/linux/gmake',
                                name                        = 'compile tutorial release',
                                description                 = 'compiling tutorial release',
                                descriptionDone             = 'tutorial release'))

factory_linux32.addStep(Compile(command                     = ['make', 'config=static_release32'],
                                workdir                     = 'code/build/linux/gmake',
                                name                        = 'compile static release',
                                description                 = 'compiling static release',
                                descriptionDone             = 'static release'))

for tool in tool_list:
  factory_linux32.addStep(ShellCommand(command              = ['premake4', 'gmake'],
                                       workdir              = 'tools/' + tool + '/build',
                                       env                  = {'PATH': ['../../../extern/premake/bin/linux32', '${PATH}']},
                                       haltOnFailure        = True,
                                       name                 = 'premake ' + tool,
                                       description          = 'running premake ' + tool,
                                       descriptionDone      = 'premake ' + tool))

  factory_linux32.addStep(Compile(command                   = ['make', 'config=release32'],
                                  workdir                   = 'tools/' + tool + '/build/linux/gmake',
                                  name                      = 'compile ' + tool + ' release',
                                  description               = 'compiling ' + tool + ' release',
                                  descriptionDone           = tool + ' release'))


factory_linux32_package                                     = BuildFactory()
factory_linux32_package.workdir                             = '.'

factory_linux32_package.addStep(Trigger(schedulerNames      = ['compile-linux32'],
                                        waitForFinish       = True,
                                        updateSourceStamp   = True,
                                        haltOnFailure       = True,
                                        name                = 'compile linux32'))

factory_linux32_package.addStep(ShellCommand(command        = ['python', 'package.py', '-p', 'linux32', '-v', Property('version', default = 'latest')],
                                             workdir        = 'code/build/python',
                                             haltOnFailure  = True,
                                             doStepIf       = lambda step: step.build.getProperty('version'),
                                             name           = 'build dev package',
                                             description    = 'building dev package',
                                             descriptionDone= 'dev package'))

factory_linux32_package.addStep(ShellCommand(command        = ['python', 'package.py', '-p', 'tutolinux32', '-v', Property('version', default = 'latest')],
                                             workdir        = 'code/build/python',
                                             haltOnFailure  = True,
                                             doStepIf       = lambda step: step.build.getProperty('version'),
                                             name           = 'build tutorial package',
                                             description    = 'building tutorial package',
                                             descriptionDone= 'tutorial package'))


factory_linux32_package.addStep(DirectoryUpload(slavesrc    = 'code/build/python/packages',
                                                masterdest  = './public_html/packages',
                                                url         = 'http://buildbot.orx-project.org:8010/packages',
                                                doStepIf    = lambda step: step.build.getProperty('version')))


# Linux64

factory_linux64                                             = BuildFactory()
factory_linux64.workdir                                     = '.'

factory_linux64.addStep(Mercurial(repourl                   = 'https://bitbucket.org/orx/orx',
                                  branchType                = 'inrepo',
                                  mode                      = 'full',
                                  method                    = 'fresh',
                                  timeout                   = 3600))

factory_linux64.addStep(ShellCommand(command                = ['premake4', 'gmake'],
                                     workdir                = 'code/build',
                                     env                    = {'PATH': ['../../extern/premake/bin/linux64', '${PATH}']},
                                     haltOnFailure          = True,
                                     name                   = 'premake',
                                     description            = 'running premake',
                                     descriptionDone        = 'premake'))

factory_linux64.addStep(Compile(command                     = ['make', 'config=embedded_dynamic_debug64'],
                                workdir                     = 'code/build/linux/gmake',
                                name                        = 'compile debug',
                                description                 = 'compiling debug',
                                descriptionDone             = 'debug'))

factory_linux64.addStep(Compile(command                     = ['make', 'config=embedded_dynamic_profile64'],
                                workdir                     = 'code/build/linux/gmake',
                                name                        = 'compile profile',
                                description                 = 'compiling profile',
                                descriptionDone             = 'profile'))

factory_linux64.addStep(Compile(command                     = ['make', 'config=embedded_dynamic_release64'],
                                workdir                     = 'code/build/linux/gmake',
                                name                        = 'compile release',
                                description                 = 'compiling release',
                                descriptionDone             = 'release'))

factory_linux64.addStep(ShellCommand(command                = ['premake4', 'gmake'],
                                     workdir                = 'tutorial/build',
                                     env                    = {'PATH': ['../../extern/premake/bin/linux64', '${PATH}']},
                                     haltOnFailure          = True,
                                     name                   = 'premake tutorial',
                                     description            = 'running premake tutorial',
                                     descriptionDone        = 'premake tutorial'))

factory_linux64.addStep(Compile(command                     = ['make', 'config=release64'],
                                workdir                     = 'tutorial/build/linux/gmake',
                                name                        = 'compile tutorial release',
                                description                 = 'compiling tutorial release',
                                descriptionDone             = 'tutorial release'))

factory_linux64.addStep(Compile(command                     = ['make', 'config=static_release64'],
                                workdir                     = 'code/build/linux/gmake',
                                name                        = 'compile static release',
                                description                 = 'compiling static release',
                                descriptionDone             = 'static release'))

for tool in tool_list:
  factory_linux64.addStep(ShellCommand(command              = ['premake4', 'gmake'],
                                       workdir              = 'tools/' + tool + '/build',
                                       env                  = {'PATH': ['../../../extern/premake/bin/linux64', '${PATH}']},
                                       haltOnFailure        = True,
                                       name                 = 'premake ' + tool,
                                       description          = 'running premake ' + tool,
                                       descriptionDone      = 'premake ' + tool))

  factory_linux64.addStep(Compile(command                   = ['make', 'config=release64'],
                                  workdir                   = 'tools/' + tool + '/build/linux/gmake',
                                  name                      = 'compile ' + tool + ' release',
                                  description               = 'compiling ' + tool + ' release',
                                  descriptionDone           = tool + ' release'))

factory_linux64_package                                     = BuildFactory()
factory_linux64_package.workdir                             = '.'

factory_linux64_package.addStep(Trigger(schedulerNames      = ['compile-linux64'],
                                        waitForFinish       = True,
                                        updateSourceStamp   = True,
                                        haltOnFailure       = True,
                                        name                = 'compile linux64'))

factory_linux64_package.addStep(ShellCommand(command        = ['python', 'package.py', '-p', 'linux64', '-v', Property('version', default = 'latest')],
                                             workdir        = 'code/build/python',
                                             haltOnFailure  = True,
                                             doStepIf       = lambda step: step.build.getProperty('version'),
                                             name           = 'build package',
                                             description    = 'building package',
                                             descriptionDone= 'package'))

factory_linux64_package.addStep(ShellCommand(command        = ['python', 'package.py', '-p', 'tutolinux64', '-v', Property('version', default = 'latest')],
                                             workdir        = 'code/build/python',
                                             haltOnFailure  = True,
                                             doStepIf       = lambda step: step.build.getProperty('version'),
                                             name           = 'build tutorial package',
                                             description    = 'building tutorial package',
                                             descriptionDone= 'tutorial package'))

factory_linux64_package.addStep(DirectoryUpload(slavesrc    = 'code/build/python/packages',
                                                masterdest  = './public_html/packages',
                                                url         = 'http://buildbot.orx-project.org:8010/packages',
                                                doStepIf    = lambda step: step.build.getProperty('version')))


# Android

factory_android                                             = BuildFactory()
factory_android.workdir                                     = '.'

factory_android.addStep(Mercurial(repourl                   = 'https://bitbucket.org/orx/orx',
                                  branchType                = 'inrepo',
                                  mode                      = 'full',
                                  method                    = 'fresh',
                                  timeout                   = 3600))

factory_android.addStep(Compile(command                     = ['ndk-build'],
                                workdir                     = 'code/build/android',
                                name                        = 'compile android',
                                description                 = 'compiling android',
                                descriptionDone             = 'android'))

factory_android.addStep(Compile(command                     = ['ndk-build'],
                                workdir                     = 'code/build/android-native',
                                name                        = 'compile android-native',
                                description                 = 'compiling android-native',
                                descriptionDone             = 'android-native'))


factory_android_package                                     = BuildFactory()
factory_android_package.workdir                             = '.'

factory_android_package.addStep(Trigger(schedulerNames      = ['compile-android'],
                                        waitForFinish       = True,
                                        updateSourceStamp   = True,
                                        haltOnFailure       = True,
                                        name                = 'compile android'))

factory_android_package.addStep(ShellCommand(command        = ['python', 'package.py', '-p', 'android', '-v', Property('version', default = 'latest')],
                                             workdir        = 'code/build/python',
                                             haltOnFailure  = True,
                                             doStepIf       = lambda step: step.build.getProperty('version'),
                                             name           = 'build android package',
                                             description    = 'building android package',
                                             descriptionDone= 'android package'))

factory_android_package.addStep(ShellCommand(command        = ['python', 'package.py', '-p', 'android-native', '-v', Property('version', default = 'latest')],
                                             workdir        = 'code/build/python',
                                             haltOnFailure  = True,
                                             doStepIf       = lambda step: step.build.getProperty('version'),
                                             name           = 'build android-native package',
                                             description    = 'building android-native package',
                                             descriptionDone= 'android-native package'))

factory_android_package.addStep(DirectoryUpload(slavesrc    = 'code/build/python/packages',
                                                masterdest  = './public_html/packages',
                                                url         = 'http://buildbot.orx-project.org:8010/packages',
                                                doStepIf    = lambda step: step.build.getProperty('version')))


# Doxygen

factory_doxygen                                             = BuildFactory()
factory_doxygen.workdir                                     = '.'

factory_doxygen.addStep(Mercurial(repourl                   = 'https://bitbucket.org/orx/orx',
                                  branchType                = 'inrepo',
                                  mode                      = 'full',
                                  method                    = 'fresh',
                                  timeout                   = 3600))

factory_doxygen.addStep(ShellCommand(command                = ['(', 'type', 'doxyfile', '&', 'echo', 'PROJECT_NUMBER=', Property('version'), ')', '|', 'doxygen', '-'],
                                     workdir                = '.',
                                     doStepIf               = lambda step: step.build.getProperty('version'),
                                     hideStepIf             = lambda results, step: not step.build.getProperty('version'),
                                     name                   = 'doxygen',
                                     description            = 'running doxygen',
                                     descriptionDone        = 'doxygen'))

factory_doxygen.addStep(ShellCommand(command                = ['doxygen', 'doxyfile'],
                                     workdir                = '.',
                                     doStepIf               = lambda step: not step.build.getProperty('version'),
                                     hideStepIf             = lambda results, step: step.build.getProperty('version'),
                                     name                   = 'doxygen',
                                     description            = 'running doxygen',
                                     descriptionDone        = 'doxygen'))

factory_doxygen.addStep(ShellCommand(command                = ['hg', 'add', 'doc/html'],
                                     workdir                = '.',
                                     doStepIf               = lambda step: not step.build.getProperty('version'),
                                     hideStepIf             = True,
                                     flunkOnFailure         = False,
                                     name                   = 'add new doc files',
                                     description            = 'running doxygen',
                                     descriptionDone        = 'doxygen add'))

factory_doxygen.addStep(ShellCommand(command                = ['hg', 'commit', '-m', '- Automatic update of doxygen docs, triggered by buildbot'],
                                     workdir                = '.',
                                     doStepIf               = lambda step: not step.build.getProperty('version'),
                                     hideStepIf             = lambda results, step: step.build.getProperty('version'),
                                     flunkOnFailure         = False,
                                     name                   = 'commit doc files',
                                     description            = 'commiting doxygen',
                                     descriptionDone        = 'doxygen commit'))

factory_doxygen.addStep(ShellCommand(command                = ['hg', 'push'],
                                     workdir                = '.',
                                     doStepIf               = lambda step: not step.build.getProperty('version'),
                                     hideStepIf             = lambda results, step: step.build.getProperty('version'),
                                     flunkOnFailure         = False,
                                     name                   = 'push doc files',
                                     description            = 'pushing doxygen',
                                     descriptionDone        = 'doxygen push'))


factory_doxygen_package                                     = BuildFactory()
factory_doxygen_package.workdir                             = '.'

factory_doxygen_package.addStep(Trigger(schedulerNames      = ['compile-doxygen'],
                                        waitForFinish       = True,
                                        updateSourceStamp   = True,
                                        haltOnFailure       = True,
                                        set_properties      = {'version': Property('version', default = False)},
                                        name                = 'generate doxygen'))

factory_doxygen_package.addStep(ShellCommand(command        = ['python', 'package.py', '-p', 'doxygen', '-v', Property('version', default = 'latest')],
                                             workdir        = 'code/build/python',
                                             haltOnFailure  = True,
                                             doStepIf       = lambda step: step.build.getProperty('version'),
                                             name           = 'build package',
                                             description    = 'building package',
                                             descriptionDone= 'package'))

factory_doxygen_package.addStep(DirectoryUpload(slavesrc    = 'code/build/python/packages',
                                                masterdest  = './public_html/packages',
                                                url         = 'http://buildbot.orx-project.org:8010/packages',
                                                doStepIf    = lambda step: step.build.getProperty('version')))


# Src

factory_src_package                                         = BuildFactory()
factory_src_package.workdir                                 = '.'

factory_src_package.addStep(Mercurial(repourl               = 'https://bitbucket.org/orx/orx',
                                      branchType            = 'inrepo',
                                      mode                  = 'full',
                                      method                = 'fresh',
                                      timeout               = 3600))

for premakeinfo in src_premake_list:
  factory_src_package.addStep(ShellCommand(command          = ['premake4', '--os=' + premakeinfo['os'], premakeinfo['action']],
                                           workdir          = 'code/build',
                                           env              = {'PATH': ['../../extern/premake/bin/linux32', '../../extern/premake/bin/linux64', '../../extern/premake/bin/mac', '../../extern/premake/bin/windows', '${PATH}']},
                                           haltOnFailure    = True,
                                           name             = 'premake ' + premakeinfo['os'] + '/' + premakeinfo['action'],
                                           description      = 'running premake ' + premakeinfo['os'] + '/' + premakeinfo['action'],
                                           descriptionDone  = 'premake ' + premakeinfo['os'] + '/' + premakeinfo['action']))

factory_src_package.addStep(ShellCommand(command            = ['python', 'package.py', '-p', 'src', '-v', Property('version', default = 'latest')],
                                         workdir            = 'code/build/python',
                                         haltOnFailure      = True,
                                         doStepIf           = lambda step: step.build.getProperty('version'),
                                         name               = 'build package',
                                         description        = 'building package',
                                         descriptionDone    = 'package'))

factory_src_package.addStep(DirectoryUpload(slavesrc        = 'code/build/python/packages',
                                            masterdest      = './public_html/packages',
                                            url             = 'http://buildbot.orx-project.org:8010/packages',
                                            doStepIf        = lambda step: step.build.getProperty('version')))


# Extern

factory_extern_package                                      = BuildFactory()
factory_extern_package.workdir                              = '.'

factory_extern_package.addStep(Mercurial(repourl            = 'https://bitbucket.org/orx/orx',
                                         branchType         = 'inrepo',
                                         mode               = 'full',
                                         method             = 'fresh',
                                         timeout            = 3600))

factory_extern_package.addStep(ShellCommand(command         = ['python', 'package.py', '-p', 'extern', '-v', Property('version', default = 'latest')],
                                            workdir         = 'code/build/python',
                                            haltOnFailure   = True,
                                            doStepIf        = lambda step: step.build.getProperty('version'),
                                            name            = 'build package',
                                            description     = 'building package',
                                            descriptionDone = 'package'))

factory_extern_package.addStep(DirectoryUpload(slavesrc     = 'code/build/python/packages',
                                               masterdest   = './public_html/packages',
                                               url          = 'http://buildbot.orx-project.org:8010/packages',
                                               doStepIf     = lambda step: step.build.getProperty('version')))


# Builders

from buildbot.config import BuilderConfig

c['builders'] = []


# VS 2008

c['builders'].append(BuilderConfig(name             = 'compile-vs2008',
                                   slavenames       = ['orx-win-slave-iarwain'],
                                   slavebuilddir    = 'orx',
                                   category         = 'compile',
                                   locks            = [compile_lock.access('counting')],
                                   factory          = factory_vs2008))

c['builders'].append(BuilderConfig(name             = 'package-vs2008',
                                   slavenames       = ['orx-win-slave-iarwain'],
                                   slavebuilddir    = 'orx',
                                   category         = 'package',
                                   locks            = [package_lock.access('counting')],
                                   factory          = factory_vs2008_package))


# VS 2010

c['builders'].append(BuilderConfig(name             = 'compile-vs2010',
                                   slavenames       = ['orx-win-slave-peppernut'],
                                   slavebuilddir    = 'orx',
                                   category         = 'compile',
                                   locks            = [compile_lock.access('counting')],
                                   factory          = factory_vs2010))

c['builders'].append(BuilderConfig(name             = 'package-vs2010',
                                   slavenames       = ['orx-win-slave-peppernut'],
                                   slavebuilddir    = 'orx',
                                   category         = 'package',
                                   locks            = [package_lock.access('counting')],
                                   factory          = factory_vs2010_package))


# MinGW

c['builders'].append(BuilderConfig(name             = 'compile-mingw',
                                   slavenames       = ['orx-win-slave-peppernut'],
                                   slavebuilddir    = 'orx',
                                   category         = 'compile',
                                   locks            = [compile_lock.access('counting')],
                                   factory          = factory_mingw))

c['builders'].append(BuilderConfig(name             = 'package-mingw',
                                   slavenames       = ['orx-win-slave-peppernut'],
                                   slavebuilddir    = 'orx',
                                   category         = 'package',
                                   locks            = [package_lock.access('counting')],
                                   factory          = factory_mingw_package))


# Mac

c['builders'].append(BuilderConfig(name             = 'compile-mac',
                                   slavenames       = ['orx-mac-slave-iarwain'],
                                   slavebuilddir    = 'orx',
                                   category         = 'compile',
                                   locks            = [compile_lock.access('counting')],
                                   factory          = factory_mac))

c['builders'].append(BuilderConfig(name             = 'package-mac',
                                   slavenames       = ['orx-mac-slave-iarwain'],
                                   slavebuilddir    = 'orx',
                                   category         = 'package',
                                   locks            = [package_lock.access('counting')],
                                   factory          = factory_mac_package))


# Linux32

c['builders'].append(BuilderConfig(name             = 'compile-linux32',
                                   slavenames       = ['orx-linux-slave-lydesik'],
                                   slavebuilddir    = 'orx',
                                   category         = 'compile',
                                   locks            = [compile_lock.access('counting')],
                                   factory          = factory_linux32))

c['builders'].append(BuilderConfig(name             = 'package-linux32',
                                   slavenames       = ['orx-linux-slave-lydesik'],
                                   slavebuilddir    = 'orx',
                                   category         = 'package',
                                   locks            = [package_lock.access('counting')],
                                   factory          = factory_linux32_package))


# Linux64

c['builders'].append(BuilderConfig(name             = 'compile-linux64',
                                   slavenames       = ['orx-linux-slave-lydesik'],
                                   slavebuilddir    = 'orx',
                                   category         = 'compile',
                                   locks            = [compile_lock.access('counting')],
                                   factory          = factory_linux64))

c['builders'].append(BuilderConfig(name             = 'package-linux64',
                                   slavenames       = ['orx-linux-slave-lydesik'],
                                   slavebuilddir    = 'orx',
                                   category         = 'package',
                                   locks            = [package_lock.access('counting')],
                                   factory          = factory_linux64_package))


# Android

c['builders'].append(BuilderConfig(name             = 'compile-android',
                                   slavenames       = ['orx-linux-slave-lydesik'],
                                   slavebuilddir    = 'orx',
                                   category         = 'compile',
                                   locks            = [compile_lock.access('counting')],
                                   factory          = factory_android))

c['builders'].append(BuilderConfig(name             = 'package-android',
                                   slavenames       = ['orx-linux-slave-lydesik'],
                                   slavebuilddir    = 'orx',
                                   category         = 'package',
                                   locks            = [package_lock.access('counting')],
                                   factory          = factory_android_package))


# Doxygen

c['builders'].append(BuilderConfig(name             = 'compile-doxygen',
                                   slavenames       = ['orx-win-slave-peppernut'],
                                   slavebuilddir    = 'orx',
                                   category         = 'compile',
                                   locks            = [compile_lock.access('counting')],
                                   factory          = factory_doxygen))

c['builders'].append(BuilderConfig(name             = 'package-doxygen',
                                   slavenames       = ['orx-win-slave-peppernut'],
                                   slavebuilddir    = 'orx',
                                   category         = 'package',
                                   locks            = [package_lock.access('counting')],
                                   factory          = factory_doxygen_package))


# Src

c['builders'].append(BuilderConfig(name             = 'package-src',
                                   slavenames       = ['orx-win-slave-iarwain', 'orx-win-slave-peppernut', 'orx-mac-slave-iarwain', 'orx-win-slave-mhyre'],
                                   slavebuilddir    = 'orx',
                                   category         = 'package',
                                   locks            = [package_lock.access('counting')],
                                   factory          = factory_src_package))


# Extern

c['builders'].append(BuilderConfig(name             = 'package-extern',
                                   slavenames       = ['orx-win-slave-iarwain', 'orx-win-slave-peppernut', 'orx-mac-slave-iarwain', 'orx-win-slave-mhyre'],
                                   slavebuilddir    = 'orx',
                                   category         = 'package',
                                   locks            = [package_lock.access('counting')],
                                   factory          = factory_extern_package))


####### STATUS TARGETS

# 'status' is a list of Status Targets. The results of each build will be
# pushed to these targets. buildbot/status/*.py has a variety to choose from,
# including web pages, email senders, and IRC bots.

c['status'] = []

from buildbot.status import html
from buildbot.status.web import authz, auth

authz_cfg = authz.Authz(auth                = auth.BasicAuth([('orx', 'orx')]),
                        gracefulShutdown    = False,
                        forceBuild          = 'auth',
                        forceAllBuilds      = 'auth',
                        pingBuilder         = 'auth',
                        stopBuild           = 'auth',
                        stopAllBuilds       = 'auth',
                        cancelPendingBuild  = 'auth')

c['status'].append(html.WebStatus(http_port = 8010,
                                  authz     = authz_cfg))


####### PROJECT IDENTITY

# The 'title' string will appear at the top of this buildbot
# installation's html.WebStatus home page (linked to the
# 'titleURL') and is embedded in the title of the waterfall HTML page.

c['title']      = 'Orx - Portable Game Engine'
c['titleURL']   = 'https://bitbucket.org/orx'

# The 'buildbotURL' string should point to the location where the buildbot's
# internal web server (usually the html.WebStatus page) is visible. This
# typically uses the port number set in the Waterfall 'status' entry, but
# with an externally-visible host name which the buildbot cannot figure out
# without some help.

c['buildbotURL'] = 'http://buildbot.orx-project.org:8010/'


####### DB URL

c['db'] = {
    # This specifies what database buildbot uses to store its state. You can leave
    # this at its default for all but the largest installations.
    'db_url' : 'sqlite:///state.sqlite',
}
