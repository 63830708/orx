# -*- python -*-

# This is orx's buildmaster config file. It must be installed as
# 'master.cfg' in your buildmaster's base directory. More info in install.txt.

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.

c = BuildmasterConfig = {}

# This is the name of the hg command.
# NB: The full path to the executable is needed on windows.
# Ex: hg = 'c:\\Program Files\\TortoiseHg\\hg.exe'

hg = 'hg'


####### BUILDSLAVES

# The 'slaves' list defines the set of recognized buildslaves. Each element is
# a BuildSlave object, specifying a unique slave name and password.  The same
# slave name and password must be configured on the slave.

from buildbot.buildslave import BuildSlave
c['slaves'] = []
c['slaves'].append(BuildSlave('orx-win-slave-iarwain', 'alexandre'))
c['slaves'].append(BuildSlave('orx-mac-slave-iarwain', 'charles'))
c['slaves'].append(BuildSlave('orx-linux-slave-lydesik', 'david'))
c['slaves'].append(BuildSlave('orx-win-slave-mhyre', 'cesar'))
c['slaves'].append(BuildSlave('orx-win-slave-peppernut', 'argine'))

# 'slavePortnum' defines the TCP port to listen on for connections from slaves.
# This must match the value configured into the buildslaves (with their
# --master option).

c['slavePortnum'] = 9989


####### CHANGESOURCES

# The 'change_source' setting tells the buildmaster how it should find out
# about source code changes.

from buildbot.changes.hgpoller import HgPoller
c['change_source'] = []
c['change_source'].append(HgPoller(repourl  = 'https://bitbucket.org/orx/orx',
                                   branch   = 'default',
                                   workdir  = 'orx',
                                   hgbin    = hg))


####### REVLINKS

from buildbot import revlinks
c['revlink'] = revlinks.RevlinkMatch([r'https://bitbucket.orx/orx/orx/\(.*\)',
                                      r'http://bitbucket.orx/orx/orx/\(.*\)'],
                                     r'https://bitbucket.org/orx/orx/src/%s/\1')


####### SCHEDULERS

# Configure the Schedulers, which decide how to react to incoming changes.

from buildbot.schedulers.basic import SingleBranchScheduler
from buildbot.schedulers.forcesched import ForceScheduler
from buildbot.schedulers.triggerable import Triggerable
from buildbot.changes import filter
c['schedulers'] = []


# Force schedulers

c['schedulers'].append(ForceScheduler(name          = 'force-package-vs2008',
                                      builderNames  = ['package-vs2008']))

c['schedulers'].append(ForceScheduler(name          = 'force-package-vs2010',
                                      builderNames  = ['package-vs2010']))

c['schedulers'].append(ForceScheduler(name          = 'force-package-mingw',
                                      builderNames  = ['package-mingw']))

c['schedulers'].append(ForceScheduler(name          = 'force-package-mac',
                                      builderNames  = ['package-mac']))

c['schedulers'].append(ForceScheduler(name          = 'force-package-linux32',
                                      builderNames  = ['package-linux32']))

c['schedulers'].append(ForceScheduler(name          = 'force-package-linux64',
                                      builderNames  = ['package-linux64']))

c['schedulers'].append(ForceScheduler(name          = 'force-package-doxygen',
                                      builderNames  = ['package-doxygen']))


# Trigger schedulers

c['schedulers'].append(Triggerable(name             = 'compile-vs2008',
                                   builderNames     = ['compile-vs2008']))

c['schedulers'].append(Triggerable(name             = 'compile-vs2010',
                                   builderNames     = ['compile-vs2010']))

c['schedulers'].append(Triggerable(name             = 'compile-mingw',
                                   builderNames     = ['compile-mingw']))

c['schedulers'].append(Triggerable(name             = 'compile-mac',
                                   builderNames     = ['compile-mac']))

c['schedulers'].append(Triggerable(name             = 'compile-linux32',
                                   builderNames     = ['compile-linux32']))

c['schedulers'].append(Triggerable(name             = 'compile-linux64',
                                   builderNames     = ['compile-linux64']))

c['schedulers'].append(Triggerable(name             = 'compile-doxygen',
                                   builderNames     = ['compile-doxygen']))


####### BUILDERS

# The 'builders' list defines the Builders, which tell Buildbot how to perform a build:
# what steps, and which slaves can execute them. Note that any particular build will
# only take place on one slave.

import os.path

from buildbot.process.factory import BuildFactory
from buildbot.process.properties import Property
from buildbot.steps.source.mercurial import Mercurial
from buildbot.steps.trigger import Trigger
from buildbot.steps.shell import ShellCommand
from buildbot.steps.shell import Compile
from buildbot.steps.shell import SetProperty
from buildbot.steps.vstudio import VCExpress9
from buildbot.steps.vstudio import VS2008
from buildbot.steps.vstudio import VS2010
from buildbot.steps.transfer import DirectoryUpload
from buildbot.locks import SlaveLock


# Locks

package_lock = SlaveLock('package_lock', maxCount = 1)
compile_lock = SlaveLock('compile_lock', maxCount = 1)


# VS2008

factory_vs2008                                              = BuildFactory()
factory_vs2008.workdir                                      = '.'

factory_vs2008.addStep(Mercurial(repourl                    = 'https://bitbucket.org/orx/orx',
                                 branchType                 = 'inrepo',
                                 mode                       = 'full',
                                 method                     = 'fresh',
                                 timeout                    = 3600))

factory_vs2008.addStep(ShellCommand(command                 = ['premake4.exe', 'vs2008'],
                                    workdir                 = 'code/build',
                                    env                     = {'PATH': ['..\\..\\extern\\premake\\bin\\windows', '${PATH}']},
                                    haltOnFailure           = True,
                                    name                    = 'premake',
                                    description             = 'running premake',
                                    descriptionDone         = 'premake'))

factory_vs2008.addStep(SetProperty(command                  = ['python', '-c', "import os.path; print os.path.exists('c:\Program Files (x86)\Microsoft Visual Studio 9.0\Common7\IDE\VCExpress.exe')"],
                                   property                 = 'hasvcexpress',
                                   hideStepIf               = True))

factory_vs2008.addStep(VCExpress9(projectfile               = 'code/build/vs2008/orx.sln',
                                  config                    = 'Embedded Dynamic Debug',
                                  mode                      = 'rebuild',
                                  name                      = 'compile debug',
                                  description               = 'compiling debug',
                                  descriptionDone           = 'debug',
                                  doStepIf                  = lambda step: step.build.getProperty('hasvcexpress'),
                                  hideStepIf                = lambda results, step: not step.build.getProperty('hasvcexpress')))
factory_vs2008.addStep(VCExpress9(projectfile               = 'code/build/vs2008/orx.sln',
                                  config                    = 'Embedded Dynamic Profile',
                                  mode                      = 'rebuild',
                                  name                      = 'compile profile',
                                  description               = 'compiling profile',
                                  descriptionDone           = 'profile',
                                  doStepIf                  = lambda step: step.build.getProperty('hasvcexpress'),
                                  hideStepIf                = lambda results, step: not step.build.getProperty('hasvcexpress')))
factory_vs2008.addStep(VCExpress9(projectfile               = 'code/build/vs2008/orx.sln',
                                  config                    = 'Embedded Dynamic Release',
                                  mode                      = 'rebuild',
                                  name                      = 'compile release',
                                  description               = 'compiling release',
                                  descriptionDone           = 'release',
                                  doStepIf                  = lambda step: step.build.getProperty('hasvcexpress'),
                                  hideStepIf                = lambda results, step: not step.build.getProperty('hasvcexpress')))

factory_vs2008.addStep(VS2008(projectfile                   = 'code/build/vs2008/orx.sln',
                              config                        = 'Embedded Dynamic Debug',
                              mode                          = 'rebuild',
                              name                          = 'compile debug',
                              description                   = 'compiling debug',
                              descriptionDone               = 'debug',
                              doStepIf                      = lambda step: not step.build.getProperty('hasvcexpress'),
                              hideStepIf                    = lambda results, step: step.build.getProperty('hasvcexpress')))
factory_vs2008.addStep(VS2008(projectfile                   = 'code/build/vs2008/orx.sln',
                              config                        = 'Embedded Dynamic Profile',
                              mode                          = 'rebuild',
                              name                          = 'compile profile',
                              description                   = 'compiling profile',
                              descriptionDone               = 'profile',
                              doStepIf                      = lambda step: not step.build.getProperty('hasvcexpress'),
                              hideStepIf                    = lambda results, step: step.build.getProperty('hasvcexpress')))
factory_vs2008.addStep(VS2008(projectfile                   = 'code/build/vs2008/orx.sln',
                              config                        = 'Embedded Dynamic Release',
                              mode                          = 'rebuild',
                              name                          = 'compile release',
                              description                   = 'compiling release',
                              descriptionDone               = 'release',
                              doStepIf                      = lambda step: not step.build.getProperty('hasvcexpress'),
                              hideStepIf                    = lambda results, step: step.build.getProperty('hasvcexpress')))

factory_vs2008_package                                      = BuildFactory()
factory_vs2008_package.workdir                              = '.'

factory_vs2008_package.addStep(Trigger(schedulerNames       = ['compile-vs2008'],
                                       waitForFinish        = True,
                                       updateSourceStamp    = True,
                                       haltOnFailure        = True,
                                       name                 = 'compile vs2008'))

factory_vs2008_package.addStep(ShellCommand(command         = ['python', 'package-dev.py', '-p', 'vs2008', '-v', Property('version', default = 'latest')],
                                            workdir         = 'code/build/python',
                                            haltOnFailure   = True,
                                            doStepIf        = lambda step: step.build.getProperty('version'),
                                            name            = 'build package',
                                            description     = 'building package',
                                            descriptionDone = 'package'))

factory_vs2008_package.addStep(DirectoryUpload(slavesrc     = 'code/build/python/packages',
                                               masterdest   = './public_html/packages',
                                               url          = 'http://buildbot.orx-project.org:8010/packages',
                                               doStepIf     = lambda step: step.build.getProperty('version')))


# VS2010

factory_vs2010                                              = BuildFactory()
factory_vs2010.workdir                                      = '.'

factory_vs2010.addStep(Mercurial(repourl                    = 'https://bitbucket.org/orx/orx',
                                 branchType                 = 'inrepo',
                                 mode                       = 'full',
                                 method                     = 'fresh',
                                 timeout                    = 3600))

factory_vs2010.addStep(ShellCommand(command                 = ['premake4.exe', 'vs2010'],
                                    workdir                 = 'code/build',
                                    env                     = {'PATH': ['..\\..\\extern\\premake\\bin\\windows', '${PATH}']},
                                    haltOnFailure           = True,
                                    name                    = 'premake',
                                    description             = 'running premake',
                                    descriptionDone         = 'premake'))

factory_vs2010.addStep(SetProperty(command                  = ['python', '-c', "import os.path; print os.path.exists('c:\Program Files (x86)\Microsoft Visual Studio 10.0\Common7\IDE\VCExpress.exe')"],
                                   property                 = 'hasvcexpress',
                                   hideStepIf               = True))

factory_vs2010.addStep(VCExpress9(projectfile               = 'code/build/vs2010/orx.sln',
                                  config                    = 'Embedded Dynamic Debug',
                                  mode                      = 'rebuild',
                                  name                      = 'compile debug',
                                  description               = 'compiling debug',
                                  descriptionDone           = 'debug',
                                  doStepIf                  = lambda step: step.build.getProperty('hasvcexpress'),
                                  hideStepIf                = lambda results, step: not step.build.getProperty('hasvcexpress')))
factory_vs2010.addStep(VCExpress9(projectfile               = 'code/build/vs2010/orx.sln',
                                  config                    = 'Embedded Dynamic Profile',
                                  mode                      = 'rebuild',
                                  name                      = 'compile profile',
                                  description               = 'compiling profile',
                                  descriptionDone           = 'profile',
                                  doStepIf                  = lambda step: step.build.getProperty('hasvcexpress'),
                                  hideStepIf                = lambda results, step: not step.build.getProperty('hasvcexpress')))
factory_vs2010.addStep(VCExpress9(projectfile               = 'code/build/vs2010/orx.sln',
                                  config                    = 'Embedded Dynamic Release',
                                  mode                      = 'rebuild',
                                  name                      = 'compile release',
                                  description               = 'compiling release',
                                  descriptionDone           = 'release',
                                  doStepIf                  = lambda step: step.build.getProperty('hasvcexpress'),
                                  hideStepIf                = lambda results, step: not step.build.getProperty('hasvcexpress')))

factory_vs2010.addStep(VS2010(projectfile                   = 'code/build/vs2010/orx.sln',
                              config                        = 'Embedded Dynamic Debug',
                              mode                          = 'rebuild',
                              name                          = 'compile debug',
                              description                   = 'compiling debug',
                              descriptionDone               = 'debug',
                              doStepIf                      = lambda step: not step.build.getProperty('hasvcexpress'),
                              hideStepIf                    = lambda results, step: step.build.getProperty('hasvcexpress')))
factory_vs2010.addStep(VS2010(projectfile                   = 'code/build/vs2010/orx.sln',
                              config                        = 'Embedded Dynamic Profile',
                              mode                          = 'rebuild',
                              name                          = 'compile profile',
                              description                   = 'compiling profile',
                              descriptionDone               = 'profile',
                              doStepIf                      = lambda step: not step.build.getProperty('hasvcexpress'),
                              hideStepIf                    = lambda results, step: step.build.getProperty('hasvcexpress')))
factory_vs2010.addStep(VS2010(projectfile                   = 'code/build/vs2010/orx.sln',
                              config                        = 'Embedded Dynamic Release',
                              mode                          = 'rebuild',
                              name                          = 'compile release',
                              description                   = 'compiling release',
                              descriptionDone               = 'release',
                              doStepIf                      = lambda step: not step.build.getProperty('hasvcexpress'),
                              hideStepIf                    = lambda results, step: step.build.getProperty('hasvcexpress')))

factory_vs2010_package                                      = BuildFactory()
factory_vs2010_package.workdir                              = '.'

factory_vs2010_package.addStep(Trigger(schedulerNames       = ['compile-vs2010'],
                                       waitForFinish        = True,
                                       updateSourceStamp    = True,
                                       haltOnFailure        = True,
                                       name                 = 'compile vs2010'))

factory_vs2010_package.addStep(ShellCommand(command         = ['python', 'package-dev.py', '-p', 'vs2010', '-v', Property('version', default = 'latest')],
                                            workdir         = 'code/build/python',
                                            haltOnFailure   = True,
                                            doStepIf        = lambda step: step.build.getProperty('version'),
                                            name            = 'build package',
                                            description     = 'building package',
                                            descriptionDone = 'package'))

factory_vs2010_package.addStep(DirectoryUpload(slavesrc     = 'code/build/python/packages',
                                               masterdest   = './public_html/packages',
                                               url          = 'http://buildbot.orx-project.org:8010/packages',
                                               doStepIf     = lambda step: step.build.getProperty('version')))


# MinGW

factory_mingw                                               = BuildFactory()
factory_mingw.workdir                                       = '.'

factory_mingw.addStep(Mercurial(repourl                     = 'https://bitbucket.org/orx/orx',
                                branchType                  = 'inrepo',
                                mode                        = 'full',
                                method                      = 'fresh',
                                timeout                     = 3600))

factory_mingw.addStep(ShellCommand(command                  = ['premake4.exe', 'gmake'],
                                   workdir                  = 'code/build',
                                   env                      = {'PATH': ['..\\..\\extern\\premake\\bin\\windows', '${PATH}']},
                                   haltOnFailure            = True,
                                   name                     = 'premake',
                                   description              = 'running',
                                   descriptionDone          = 'premake'))

factory_mingw.addStep(Compile(command                       = ['mingw32-make', 'config=embedded_dynamic_debug'],
                              workdir                       = 'code/build/gmake',
                              name                          = 'compile debug',
                              description                   = 'compiling debug',
                              descriptionDone               = 'debug'))

factory_mingw.addStep(Compile(command                       = ['mingw32-make', 'config=embedded_dynamic_profile'],
                              workdir                       = 'code/build/gmake',
                              name                          = 'compile profile',
                              description                   = 'compiling profile',
                              descriptionDone               = 'profile'))

factory_mingw.addStep(Compile(command                       = ['mingw32-make', 'config=embedded_dynamic_release'],
                              workdir                       = 'code/build/gmake',
                              name                          = 'compile release',
                              description                   = 'compiling release',
                              descriptionDone               = 'release'))

factory_mingw_package                                       = BuildFactory()
factory_mingw_package.workdir                               = '.'

factory_mingw_package.addStep(Trigger(schedulerNames        = ['compile-mingw'],
                                      waitForFinish         = True,
                                      updateSourceStamp     = True,
                                      haltOnFailure         = True,
                                      name                  = 'compile mingw'))

factory_mingw_package.addStep(ShellCommand(command          = ['python', 'package-dev.py', '-p', 'mingw', '-v', Property('version', default = 'latest')],
                                           workdir          = 'code/build/python',
                                           haltOnFailure    = True,
                                           doStepIf         = lambda step: step.build.getProperty('version'),
                                           name             = 'build package',
                                           description      = 'building package',
                                           descriptionDone  = 'package'))

factory_mingw_package.addStep(DirectoryUpload(slavesrc      = 'code/build/python/packages',
                                              masterdest    = './public_html/packages',
                                              url           = 'http://buildbot.orx-project.org:8010/packages',
                                              doStepIf      = lambda step: step.build.getProperty('version')))


# Mac

factory_mac                                                 = BuildFactory()
factory_mac.workdir                                         = '.'

factory_mac.addStep(Mercurial(repourl                       = 'https://bitbucket.org/orx/orx',
                              branchType                    = 'inrepo',
                              mode                          = 'full',
                              method                        = 'fresh',
                              timeout                       = 3600))

factory_mac.addStep(ShellCommand(command                    = ['premake4', '--split-platforms', 'gmake'],
                                 workdir                    = 'code/build',
                                 env                        = {'PATH': ['../../extern/premake/bin/mac', '${PATH}']},
                                 haltOnFailure              = True,
                                 name                       = 'premake',
                                 description                = 'running premake',
                                 descriptionDone            = 'premake'))

factory_mac.addStep(Compile(command                         = ['make', 'config=embedded_dynamic_debug64'],
                            workdir                         = 'code/build/gmake',
                            name                            = 'compile debug 64',
                            description                     = 'compiling debug 64',
                            descriptionDone                 = 'debug 64'))

factory_mac.addStep(Compile(command                         = ['make', 'config=embedded_dynamic_profile64'],
                            workdir                         = 'code/build/gmake',
                            name                            = 'compile profile 64',
                            description                     = 'compiling profile 64',
                            descriptionDone                 = 'profile 64'))

factory_mac.addStep(Compile(command                         = ['make', 'config=embedded_dynamic_release64'],
                            workdir                         = 'code/build/gmake',
                            name                            = 'compile release 64',
                            description                     = 'compiling release 64',
                            descriptionDone                 = 'release 64'))

factory_mac.addStep(Compile(command                         = ['make', 'config=embedded_dynamic_debug32'],
                            workdir                         = 'code/build/gmake',
                            name                            = 'compile debug 32',
                            description                     = 'compiling debug 32',
                            descriptionDone                 = 'debug 32'))

factory_mac.addStep(Compile(command                         = ['make', 'config=embedded_dynamic_profile32'],
                            workdir                         = 'code/build/gmake',
                            name                            = 'compile profile 32',
                            description                     = 'compiling profile 32',
                            descriptionDone                 = 'profile 32'))

factory_mac.addStep(Compile(command                         = ['make', 'config=embedded_dynamic_release32'],
                            workdir                         = 'code/build/gmake',
                            name                            = 'compile release 32',
                            description                     = 'compiling release 32',
                            descriptionDone                 = 'release 32'))

factory_mac.addStep(Compile(command                         = ['lipo', '-create', 'x32/liborxd.dylib', 'x64/liborxd.dylib', '-output', 'liborxd.dylib'],
                            workdir                         = 'code/lib/dynamic',
                            name                            = 'create universal debug',
                            description                     = 'creating universal debug',
                            descriptionDone                 = 'universal debug'))

factory_mac.addStep(Compile(command                         = ['lipo', '-create', 'x32/liborxp.dylib', 'x64/liborxp.dylib', '-output', 'liborxp.dylib'],
                            workdir                         = 'code/lib/dynamic',
                            name                            = 'create universal profile',
                            description                     = 'creating universal profile',
                            descriptionDone                 = 'universal profile'))

factory_mac.addStep(Compile(command                         = ['lipo', '-create', 'x32/liborx.dylib', 'x64/liborx.dylib', '-output', 'liborx.dylib'],
                            workdir                         = 'code/lib/dynamic',
                            name                            = 'create universal release',
                            description                     = 'creating universal release',
                            descriptionDone                 = 'universal release'))


factory_mac_package                                         = BuildFactory()
factory_mac_package.workdir                                 = '.'

factory_mac_package.addStep(Trigger(schedulerNames          = ['compile-mac'],
                                    waitForFinish           = True,
                                    updateSourceStamp       = True,
                                    haltOnFailure           = True,
                                    name                    = 'compile mac'))

factory_mac_package.addStep(ShellCommand(command            = ['python', 'package-dev.py', '-p', 'mac', '-v', Property('version', default = 'latest')],
                                         workdir            = 'code/build/python',
                                         haltOnFailure      = True,
                                         doStepIf           = lambda step: step.build.getProperty('version'),
                                         name               = 'build package',
                                         description        = 'building package',
                                         descriptionDone    = 'package'))

factory_mac_package.addStep(DirectoryUpload(slavesrc        = 'code/build/python/packages',
                                            masterdest      = './public_html/packages',
                                            url             = 'http://buildbot.orx-project.org:8010/packages',
                                            doStepIf        = lambda step: step.build.getProperty('version')))


# Linux32

factory_linux32                                             = BuildFactory()
factory_linux32.workdir                                     = '.'

factory_linux32.addStep(Mercurial(repourl                   = 'https://bitbucket.org/orx/orx',
                                  branchType                = 'inrepo',
                                  mode                      = 'full',
                                  method                    = 'fresh',
                                  timeout                   = 3600))

factory_linux32.addStep(ShellCommand(command                = ['premake4', 'gmake'],
                                     workdir                = 'code/build',
                                     env                    = {'PATH': ['../../extern/premake/bin/linux32', '${PATH}']},
                                     haltOnFailure          = True,
                                     name                   = 'premake',
                                     description            = 'running premake',
                                     descriptionDone        = 'premake'))

factory_linux32.addStep(Compile(command                     = ['make', 'config=embedded_dynamic_debug32'],
                                workdir                     = 'code/build/gmake',
                                name                        = 'compile debug 32',
                                description                 = 'compiling debug 32',
                                descriptionDone             = 'debug 32'))

factory_linux32.addStep(Compile(command                     = ['make', 'config=embedded_dynamic_profile32'],
                                workdir                     = 'code/build/gmake',
                                name                        = 'compile profile 32',
                                description                 = 'compiling profile 32',
                                descriptionDone             = 'profile 32'))

factory_linux32.addStep(Compile(command                     = ['make', 'config=embedded_dynamic_release32'],
                                workdir                     = 'code/build/gmake',
                                name                        = 'compile release 32',
                                description                 = 'compiling release 32',
                                descriptionDone             = 'release 32'))

factory_linux32_package                                     = BuildFactory()
factory_linux32_package.workdir                             = '.'

factory_linux32_package.addStep(Trigger(schedulerNames      = ['compile-linux32'],
                                        waitForFinish       = True,
                                        updateSourceStamp   = True,
                                        haltOnFailure       = True,
                                        name                = 'compile linux32'))

factory_linux32_package.addStep(ShellCommand(command        = ['python', 'package-dev.py', '-p', 'linux32', '-v', Property('version', default = 'latest')],
                                             workdir        = 'code/build/python',
                                             haltOnFailure  = True,
                                             doStepIf       = lambda step: step.build.getProperty('version'),
                                             name           = 'build package',
                                             description    = 'building package',
                                             descriptionDone= 'package'))

factory_linux32_package.addStep(DirectoryUpload(slavesrc    = 'code/build/python/packages',
                                                masterdest  = './public_html/packages',
                                                url         = 'http://buildbot.orx-project.org:8010/packages',
                                                doStepIf    = lambda step: step.build.getProperty('version')))


# Linux64

factory_linux64                                             = BuildFactory()
factory_linux64.workdir                                     = '.'

factory_linux64.addStep(Mercurial(repourl                   = 'https://bitbucket.org/orx/orx',
                                  branchType                = 'inrepo',
                                  mode                      = 'full',
                                  method                    = 'fresh',
                                  timeout                   = 3600))

factory_linux64.addStep(ShellCommand(command                = ['premake4', 'gmake'],
                                     workdir                = 'code/build',
                                     env                    = {'PATH': ['../../extern/premake/bin/linux64', '${PATH}']},
                                     haltOnFailure          = True,
                                     name                   = 'premake',
                                     description            = 'running premake',
                                     descriptionDone        = 'premake'))

factory_linux64.addStep(Compile(command                     = ['make', 'config=embedded_dynamic_debug64'],
                                workdir                     = 'code/build/gmake',
                                name                        = 'compile debug 64',
                                description                 = 'compiling debug 64',
                                descriptionDone             = 'debug 64'))

factory_linux64.addStep(Compile(command                     = ['make', 'config=embedded_dynamic_profile64'],
                                workdir                     = 'code/build/gmake',
                                name                        = 'compile profile 64',
                                description                 = 'compiling profile 64',
                                descriptionDone             = 'profile 64'))

factory_linux64.addStep(Compile(command                     = ['make', 'config=embedded_dynamic_release64'],
                                workdir                     = 'code/build/gmake',
                                name                        = 'compile release 64',
                                description                 = 'compiling release 64',
                                descriptionDone             = 'release 64'))

factory_linux64_package                                     = BuildFactory()
factory_linux64_package.workdir                             = '.'

factory_linux64_package.addStep(Trigger(schedulerNames      = ['compile-linux64'],
                                        waitForFinish       = True,
                                        updateSourceStamp   = True,
                                        haltOnFailure       = True,
                                        name                = 'compile linux64'))

factory_linux64_package.addStep(ShellCommand(command        = ['python', 'package-dev.py', '-p', 'linux64', '-v', Property('version', default = 'latest')],
                                             workdir        = 'code/build/python',
                                             haltOnFailure  = True,
                                             doStepIf       = lambda step: step.build.getProperty('version'),
                                             name           = 'build package',
                                             description    = 'building package',
                                             descriptionDone= 'package'))

factory_linux64_package.addStep(DirectoryUpload(slavesrc    = 'code/build/python/packages',
                                                masterdest  = './public_html/packages',
                                                url         = 'http://buildbot.orx-project.org:8010/packages',
                                                doStepIf    = lambda step: step.build.getProperty('version')))


# Doxygen

factory_doxygen                                             = BuildFactory()
factory_doxygen.workdir                                     = '.'

factory_doxygen.addStep(Mercurial(repourl                   = 'https://bitbucket.org/orx/orx',
                                  branchType                = 'inrepo',
                                  mode                      = 'full',
                                  method                    = 'fresh',
                                  timeout                   = 3600))

factory_doxygen.addStep(ShellCommand(command                = ['(', 'type', 'doxyfile', '&', 'echo', 'PROJECT_NUMBER=', Property('version'), ')', '|', 'doxygen', '-'],
                                     workdir                = '.',
                                     doStepIf               = lambda step: step.build.getProperty('version'),
                                     hideStepIf             = lambda results, step: not step.build.getProperty('version'),
                                     name                   = 'doxygen',
                                     description            = 'running doxygen',
                                     descriptionDone        = 'doxygen'))

factory_doxygen.addStep(ShellCommand(command                = ['doxygen', 'doxyfile'],
                                     workdir                = '.',
                                     doStepIf               = lambda step: not step.build.getProperty('version'),
                                     hideStepIf             = lambda results, step: step.build.getProperty('version'),
                                     name                   = 'doxygen',
                                     description            = 'running doxygen',
                                     descriptionDone        = 'doxygen'))

factory_doxygen.addStep(ShellCommand(command                = ['hg', 'add', 'doc/html'],
                                     workdir                = '.',
                                     doStepIf               = lambda step: not step.build.getProperty('version'),
                                     hideStepIf             = True,
                                     flunkOnFailure         = False,
                                     name                   = 'add new doc files',
                                     description            = 'running doxygen',
                                     descriptionDone        = 'doxygen add'))

factory_doxygen.addStep(ShellCommand(command                = ['hg', 'commit', '-m', '- Automatic update of doxygen docs, triggered by buildbot'],
                                     workdir                = '.',
                                     doStepIf               = lambda step: not step.build.getProperty('version'),
                                     hideStepIf             = lambda results, step: step.build.getProperty('version'),
                                     flunkOnFailure         = False,
                                     name                   = 'commit doc files',
                                     description            = 'commiting doxygen',
                                     descriptionDone        = 'doxygen commit'))

factory_doxygen.addStep(ShellCommand(command                = ['hg', 'push'],
                                     workdir                = '.',
                                     doStepIf               = lambda step: not step.build.getProperty('version'),
                                     hideStepIf             = lambda results, step: step.build.getProperty('version'),
                                     flunkOnFailure         = False,
                                     name                   = 'push doc files',
                                     description            = 'pushing doxygen',
                                     descriptionDone        = 'doxygen push'))

factory_doxygen_package                                     = BuildFactory()
factory_doxygen_package.workdir                             = '.'

factory_doxygen_package.addStep(Trigger(schedulerNames      = ['compile-doxygen'],
                                        waitForFinish       = True,
                                        updateSourceStamp   = True,
                                        haltOnFailure       = True,
                                        set_properties      = {'version': Property('version', default = False)},
                                        name                = 'generate doxygen'))

factory_doxygen_package.addStep(ShellCommand(command        = ['python', 'package-dev.py', '-p', 'doxygen', '-v', Property('version', default = 'latest')],
                                             workdir        = 'code/build/python',
                                             haltOnFailure  = True,
                                             doStepIf       = lambda step: step.build.getProperty('version'),
                                             name           = 'build package',
                                             description    = 'building package',
                                             descriptionDone= 'package'))

factory_doxygen_package.addStep(DirectoryUpload(slavesrc    = 'code/build/python/packages',
                                                masterdest  = './public_html/packages',
                                                url         = 'http://buildbot.orx-project.org:8010/packages',
                                                doStepIf    = lambda step: step.build.getProperty('version')))


# Builders

from buildbot.config import BuilderConfig

c['builders'] = []


# VS 2008

c['builders'].append(BuilderConfig(name             = 'compile-vs2008',
                                   slavenames       = ['orx-win-slave-iarwain'],
                                   slavebuilddir    = 'orx',
                                   category         = 'compile',
                                   locks            = [compile_lock.access('counting')],
                                   factory          = factory_vs2008))

c['builders'].append(BuilderConfig(name             = 'package-vs2008',
                                   slavenames       = ['orx-win-slave-iarwain'],
                                   slavebuilddir    = 'orx',
                                   category         = 'package',
                                   locks            = [package_lock.access('counting')],
                                   factory          = factory_vs2008_package))


# VS 2010

c['builders'].append(BuilderConfig(name             = 'compile-vs2010',
                                   slavenames       = ['orx-win-slave-peppernut'],
                                   slavebuilddir    = 'orx',
                                   category         = 'compile',
                                   locks            = [compile_lock.access('counting')],
                                   factory          = factory_vs2010))

c['builders'].append(BuilderConfig(name             = 'package-vs2010',
                                   slavenames       = ['orx-win-slave-peppernut'],
                                   slavebuilddir    = 'orx',
                                   category         = 'package',
                                   locks            = [package_lock.access('counting')],
                                   factory          = factory_vs2010_package))


# MinGW

c['builders'].append(BuilderConfig(name             = 'compile-mingw',
                                   slavenames       = ['orx-win-slave-iarwain', 'orx-win-slave-mhyre', 'orx-win-slave-peppernut'],
                                   slavebuilddir    = 'orx',
                                   category         = 'compile',
                                   locks            = [compile_lock.access('counting')],
                                   factory          = factory_mingw))

c['builders'].append(BuilderConfig(name             = 'package-mingw',
                                   slavenames       = ['orx-win-slave-iarwain', 'orx-win-slave-mhyre', 'orx-win-slave-peppernut'],
                                   slavebuilddir    = 'orx',
                                   category         = 'package',
                                   locks            = [package_lock.access('counting')],
                                   factory          = factory_mingw_package))


# Mac

c['builders'].append(BuilderConfig(name             = 'compile-mac',
                                   slavenames       = ['orx-mac-slave-iarwain'],
                                   slavebuilddir    = 'orx',
                                   category         = 'compile',
                                   locks            = [compile_lock.access('counting')],
                                   factory          = factory_mac))

c['builders'].append(BuilderConfig(name             = 'package-mac',
                                   slavenames       = ['orx-mac-slave-iarwain'],
                                   slavebuilddir    = 'orx',
                                   category         = 'package',
                                   locks            = [package_lock.access('counting')],
                                   factory          = factory_mac_package))


# Linux32

c['builders'].append(BuilderConfig(name             = 'compile-linux32',
                                   slavenames       = ['orx-linux-slave-lydesik'],
                                   slavebuilddir    = 'orx',
                                   category         = 'compile',
                                   locks            = [compile_lock.access('counting')],
                                   factory          = factory_linux32))

c['builders'].append(BuilderConfig(name             = 'package-linux32',
                                   slavenames       = ['orx-linux-slave-lydesik'],
                                   slavebuilddir    = 'orx',
                                   category         = 'package',
                                   locks            = [package_lock.access('counting')],
                                   factory          = factory_linux32_package))


# Linux64

c['builders'].append(BuilderConfig(name             = 'compile-linux64',
                                   slavenames       = ['orx-linux-slave-lydesik'],
                                   slavebuilddir    = 'orx',
                                   category         = 'compile',
                                   locks            = [compile_lock.access('counting')],
                                   factory          = factory_linux64))

c['builders'].append(BuilderConfig(name             = 'package-linux64',
                                   slavenames       = ['orx-linux-slave-lydesik'],
                                   slavebuilddir    = 'orx',
                                   category         = 'package',
                                   locks            = [package_lock.access('counting')],
                                   factory          = factory_linux64_package))


# Doxygen

c['builders'].append(BuilderConfig(name             = 'compile-doxygen',
                                   slavenames       = ['orx-win-slave-iarwain', 'orx-win-slave-peppernut'],
                                   slavebuilddir    = 'orx',
                                   category         = 'compile',
                                   locks            = [compile_lock.access('counting')],
                                   factory          = factory_doxygen))

c['builders'].append(BuilderConfig(name             = 'package-doxygen',
                                   slavenames       = ['orx-win-slave-iarwain', 'orx-win-slave-peppernut'],
                                   slavebuilddir    = 'orx',
                                   category         = 'package',
                                   locks            = [package_lock.access('counting')],
                                   factory          = factory_doxygen_package))


####### STATUS TARGETS

# 'status' is a list of Status Targets. The results of each build will be
# pushed to these targets. buildbot/status/*.py has a variety to choose from,
# including web pages, email senders, and IRC bots.

c['status'] = []

from buildbot.status import html
from buildbot.status.web import authz, auth

authz_cfg = authz.Authz(auth                = auth.BasicAuth([('orx', 'orx')]),
                        gracefulShutdown    = False,
                        forceBuild          = 'auth',
                        forceAllBuilds      = 'auth',
                        pingBuilder         = 'auth',
                        stopBuild           = 'auth',
                        stopAllBuilds       = 'auth',
                        cancelPendingBuild  = 'auth')

c['status'].append(html.WebStatus(http_port = 8010,
                                  authz     = authz_cfg))


####### PROJECT IDENTITY

# The 'title' string will appear at the top of this buildbot
# installation's html.WebStatus home page (linked to the
# 'titleURL') and is embedded in the title of the waterfall HTML page.

c['title']      = 'Orx - Portable Game Engine'
c['titleURL']   = 'https://bitbucket.org/orx'

# The 'buildbotURL' string should point to the location where the buildbot's
# internal web server (usually the html.WebStatus page) is visible. This
# typically uses the port number set in the Waterfall 'status' entry, but
# with an externally-visible host name which the buildbot cannot figure out
# without some help.

c['buildbotURL'] = 'http://buildbot.orx-project.org:8010/'


####### DB URL

c['db'] = {
    # This specifies what database buildbot uses to store its state. You can leave
    # this at its default for all but the largest installations.
    'db_url' : 'sqlite:///state.sqlite',
}
