# -*- python -*-
# ex: set syntax=python:

# This is a sample buildmaster config file. It must be installed as
# 'master.cfg' in your buildmaster's base directory.

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.

c = BuildmasterConfig = {}


####### BUILDSLAVES

# The 'slaves' list defines the set of recognized buildslaves. Each element is
# a BuildSlave object, specifying a unique slave name and password.  The same
# slave name and password must be configured on the slave.

from buildbot.buildslave import BuildSlave
c['slaves'] = []
c['slaves'].append(BuildSlave("orx-win-slave-rom", "alexandre"))
c['slaves'].append(BuildSlave("orx-mac-slave-rom", "lahire"))

# 'slavePortnum' defines the TCP port to listen on for connections from slaves.
# This must match the value configured into the buildslaves (with their
# --master option).

c['slavePortnum'] = 9989


####### CHANGESOURCES

# The 'change_source' setting tells the buildmaster how it should find out
# about source code changes.

from buildbot.changes.hgpoller import HgPoller
c['change_source'] = []
c['change_source'].append(HgPoller(repourl  = 'http://bitbucket.org/orx/orx',
                                   branch   = 'default',
                                   workdir  = 'orx',
                                   hgbin    = 'C:\\Program Files\\TortoiseHg\\hg.exe'))


####### SCHEDULERS

# Configure the Schedulers, which decide how to react to incoming changes.

from buildbot.schedulers.basic import SingleBranchScheduler
from buildbot.schedulers.forcesched import ForceScheduler
from buildbot.changes import filter
c['schedulers'] = []
c['schedulers'].append(ForceScheduler(name          = "msvs2008-build",
                                      builderNames  = ["msvs2008"]))
c['schedulers'].append(ForceScheduler(name          = "mingw-build",
                                      builderNames  = ["mingw"]))
c['schedulers'].append(ForceScheduler(name          = "mac-build",
                                      builderNames  = ["mac"]))


####### BUILDERS

# The 'builders' list defines the Builders, which tell Buildbot how to perform a build:
# what steps, and which slaves can execute them. Note that any particular build will
# only take place on one slave.

import os.path

from buildbot.process.factory import BuildFactory
from buildbot.steps.source.mercurial import Mercurial
from buildbot.steps.shell import ShellCommand
from buildbot.steps.shell import Compile
from buildbot.steps.vstudio import VCExpress9
from buildbot.steps.vstudio import VS2008


# MSVS2008

def HasVCExpress2008(*step):
    import os.path
    return os.path.exists('c:\Program Files (x86)\Microsoft Visual Studio 9.0\Common7\IDE\VCExpress.exe')

def HasNotVCExpress2008(*step):
    return not HasVCExpress2008(step)

factory_msvs2008 = BuildFactory()
factory_msvs2008.addStep(Mercurial(repourl      = 'http://bitbucket.org/orx/orx',
                                   branchType   = 'inrepo',
                                   mode         = 'full',
                                   method       = 'fresh'))

factory_msvs2008.addStep(VCExpress9(projectfile = 'code/build/windows/msvs2008/orx.sln',
                                    config      = 'Embedded Dynamic Debug',
                                    mode        = 'rebuild',
                                    doStepIf    = HasVCExpress2008,
                                    hideStepIf  = HasNotVCExpress2008))
factory_msvs2008.addStep(VCExpress9(projectfile = 'code/build/windows/msvs2008/orx.sln',
                                    config      = 'Embedded Dynamic Profile',
                                    mode        = 'rebuild',
                                    doStepIf    = HasVCExpress2008,
                                    hideStepIf  = HasNotVCExpress2008))
factory_msvs2008.addStep(VCExpress9(projectfile = 'code/build/windows/msvs2008/orx.sln',
                                    config      = 'Embedded Dynamic Release',
                                    mode        = 'rebuild',
                                    doStepIf    = HasVCExpress2008,
                                    hideStepIf  = HasNotVCExpress2008))

factory_msvs2008.addStep(VS2008(projectfile = 'code/build/windows/msvs2008/orx.sln',
                                config      = 'Embedded Dynamic Debug',
                                mode        = 'rebuild',
                                doStepIf    = HasNotVCExpress2008,
                                hideStepIf  = HasVCExpress2008))
factory_msvs2008.addStep(VS2008(projectfile = 'code/build/windows/msvs2008/orx.sln',
                                config      = 'Embedded Dynamic Profile',
                                mode        = 'rebuild',
                                doStepIf    = HasNotVCExpress2008,
                                hideStepIf  = HasVCExpress2008))
factory_msvs2008.addStep(VS2008(projectfile = 'code/build/windows/msvs2008/orx.sln',
                                config      = 'Embedded Dynamic Release',
                                mode        = 'rebuild',
                                doStepIf    = HasNotVCExpress2008,
                                hideStepIf  = HasVCExpress2008))


# MinGW

factory_mingw = BuildFactory()
factory_mingw.addStep(Mercurial(repourl     = 'https://bitbucket.org/orx/orx',
                                branchType  = 'inrepo',
                                mode        = 'full',
                                method      = 'fresh'))
factory_mingw.addStep(ShellCommand(command  = ["../../extern/premake/bin/windows/premake4.exe", "gmake"],
                                   workdir  = "code/build/gmake"))
factory_mingw.addStep(Compile(command       = ["make", "config=embedded_dynamic_debug"],
                              workdir       = "code/build/gmake"))
factory_mingw.addStep(Compile(command       = ["make", "config=embedded_dynamic_profile"],
                              workdir       = "code/build/gmake"))
factory_mingw.addStep(Compile(command       = ["make", "config=embedded_dynamic_release"],
                              workdir       = "code/build/gmake"))


# Mac

factory_mac = BuildFactory()
factory_mac.addStep(Mercurial(repourl       = 'https://bitbucket.org/orx/orx',
                              branchType    = 'inrepo',
                              mode          = 'full',
                              method        = 'fresh'))
factory_mac.addStep(ShellCommand(command    = ["../../extern/premake/bin/mac/premake4", "gmake"],
                                 workdir    = "code/build/gmake"))
factory_mac.addStep(Compile(command         = ["make", "config=embedded_dynamic_debug64"],
                            workdir         = "code/build/gmake"))
factory_mac.addStep(Compile(command         = ["make", "config=embedded_dynamic_profile64"],
                            workdir         = "code/build/gmake"))
factory_mac.addStep(Compile(command         = ["make", "config=embedded_dynamic_release64"],
                            workdir         = "code/build/gmake"))
factory_mac.addStep(Compile(command         = ["make", "config=embedded_dynamic_debug32"],
                            workdir         = "code/build/gmake"))
factory_mac.addStep(Compile(command         = ["make", "config=embedded_dynamic_profile32"],
                            workdir         = "code/build/gmake"))
factory_mac.addStep(Compile(command         = ["make", "config=embedded_dynamic_release32"],
                            workdir         = "code/build/gmake"))


# Builders

from buildbot.config import BuilderConfig

c['builders'] = []

c['builders'].append(BuilderConfig(name         = "msvs2008",
                                   slavenames   = ["orx-win-slave-rom"],
                                   factory      = factory_msvs2008))

c['builders'].append(BuilderConfig(name         = "mingw",
                                   slavenames   = ["orx-win-slave-rom"],
                                   factory      = factory_mingw))

c['builders'].append(BuilderConfig(name         = "mac",
                                   slavenames   = ["orx-mac-slave-rom"],
                                   factory      = factory_mac))


####### STATUS TARGETS

# 'status' is a list of Status Targets. The results of each build will be
# pushed to these targets. buildbot/status/*.py has a variety to choose from,
# including web pages, email senders, and IRC bots.

c['status'] = []

from buildbot.status import html
from buildbot.status.web import authz, auth

authz_cfg = authz.Authz(auth            = auth.BasicAuth([("orx", "orx")]),
                     gracefulShutdown   = False,
                     forceBuild         = 'auth',
                     forceAllBuilds     = 'auth',
                     pingBuilder        = 'auth',
                     stopBuild          = 'auth',
                     stopAllBuilds      = 'auth',
                     cancelPendingBuild = 'auth')

c['status'].append(html.WebStatus(http_port = 8010,
                                  authz     = authz_cfg))


####### PROJECT IDENTITY

# The 'title' string will appear at the top of this buildbot
# installation's html.WebStatus home page (linked to the
# 'titleURL') and is embedded in the title of the waterfall HTML page.

c['title']      = "Orx - Portable Game Engine"
c['titleURL']   = "https://bitbucket.org/orx"

# The 'buildbotURL' string should point to the location where the buildbot's
# internal web server (usually the html.WebStatus page) is visible. This
# typically uses the port number set in the Waterfall 'status' entry, but
# with an externally-visible host name which the buildbot cannot figure out
# without some help.

c['buildbotURL'] = "http://localhost:8010/"


####### DB URL

c['db'] = {
    # This specifies what database buildbot uses to store its state. You can leave
    # this at its default for all but the largest installations.
    'db_url' : "sqlite:///state.sqlite",
}
